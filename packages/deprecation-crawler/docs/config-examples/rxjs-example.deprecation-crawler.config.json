{
  "outputFormatters": [
    "tagBasedMarkdown",
    "groupBasedMarkdown"
  ],
  "groups": [
    {
      "key": "ungrouped",
      "matchers": [
        "single array instead",
        "use new subject() instead",
        "interopobservable",
        "observedvalueunionfromarray",
        "allow inference or cast with `as`",
        "empty notifiers",
        "use as interface only",
        "iterator",
        "rxsubscriber",
        "subject"
      ]
    },
    {
      "key": "internal-implementation ",
      "matchers": [
        "internal implementation",
        "internal use only",
        "no longer checked"
      ]
    },
    {
      "key": "materialize",
      "matchers": [
        "notificationkind",
        "materialize",
        "dematerialize"
      ]
    },
    {
      "key": "observer-vs-callback",
      "matchers": [
        "^(?=.*observer)(?=.*callback)..."
      ]
    },
    {
      "key": "resultSelector",
      "matchers": [
        "resultselector"
      ]
    },
    {
      "key": "scheduler-argument",
      "matchers": [
        "^(?=.*scheduler)(?=.*deprecated)...",
        "^(?=.*scheduled)(?=.*instead)..."
      ]
    },
    {
      "key": "constants",
      "matchers": [
        "^(?=.*in favor of)(?=.*constant)...",
        "in favor of"
      ]
    },
    {
      "key": "array-vs-props",
      "matchers": [
        "array of observables instead"
      ]
    },
    {
      "key": "static-flattening",
      "matchers": [
        "^(?=.*scheduled)(?=.*all)(?=.*)...",
        "use static"
      ]
    },
    {
      "key": "xwith",
      "matchers": [
        "^(?=.*Deprecated use {@link)(?=.*with})(?=.*)...",
        "combinelatestwith",
        "concatwith",
        "mergewith",
        "racewith",
        "zipwith",
        "with}"
      ]
    },
    {
      "key": "mapto-signature",
      "matchers": [
        "mapto"
      ]
    },
    {
      "key": "static",
      "matchers": [
        "static creation function instead"
      ]
    },
    {
      "key": "v8",
      "matchers": [
        "v8"
      ]
    },
    {
      "key": "websocketsubject",
      "matchers": [
        "deserializer"
      ]
    }
  ],
  "outputDirectory": "./docs_app/content/deprecations",
  "deprecationComment": "@deprecated",
  "deprecationLink": "https://rxjs.dev/deprecations",
  "tsConfigPath": "src/tsconfig.base.json"
}
