{
  "outputFormatters": ["tagBasedMarkdown", "groupBasedMarkdown"],
  "groups": [
    {
      "key": "ungrouped",
      "matchers": [
        "single array instead",
        "use new subject() instead",
        "interopobservable",
        "observedvalueunionfromarray",
        "allow inference or cast with `as`",
        "empty notifiers",
        "use as interface only",
        "iterator",
        "rxsubscriber",
        "subject",
        "use \\{\\@link deserializer\\}"
      ]
    },
    {
      "key": "internal-implementation ",
      "matchers": ["internal implementation", "internal use only", "no longer checked", "private API", "not for public use"]
    },
    {
      "key": "notification",
      "matchers": [
        "notificationkind",
        "materialize",
        "`kind === \"N\"",
        "NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead",
        "try to create POJOs matching the signature outlined in \\{\\@link ObservableNotification\\}"
      ]
    },
    { "key": "observer-vs-callback", "matchers": ["^(?=.*observer)(?=.*callback)..."] },
    { "key": "resultSelector", "matchers": ["resultselector", "use \\{\\@link deserializer\\}"] },
    {
      "key": "scheduler-argument",
      "matchers": ["^(?=.*scheduler)(?=.*deprecated)...", "^(?=.*scheduled)(?=.*instead)...", "@deprecated use static {@link merge}"]
    },
    {
      "key": "xwith",
      "matchers": [
        "^(?=.*Deprecated use {@link)(?=.*with})(?=.*)...",
        "combinelatestwith",
        "concatwith",
        "mergewith",
        "racewith",
        "zipwith",
        "with}"
      ]
    },
    { "key": "typings", "matchers": [
      "use mapto<r>\\(value: r\\): operatorfunction<any, r> signature instead",
      "array of observables instead"
    ] },
    { "key": "heanth-check", "matchers": ["\\/\\*\\* *\\@deprecated *\\*/"] },
    {
      "key": "alias-renamed-replace",
      "matchers": [
        "",
        " renamed\\. use",
        "^(?=.*use)(?=.*static creation function instead)(?=.*)...",
        "use `partition` static creation function instead",
        "use the configuration object with \\{\\@link timeout\\} instead",
        "use \\{\\@link map\\} and optional chaining",
        "use the configuration object with \\{\\@link timeout\\} instead",
        "in favor of"
      ]
    }
  ],
  "configPath": "tmp/deprecation-crawler.config.json",
  "outputDirectory": "./docs_app/content/deprecations",
  "deprecationComment": "@deprecated",
  "deprecationLink": "https://rxjs.dev/deprecations",
  "tsConfigPath": "src/tsconfig.base.json"
}
