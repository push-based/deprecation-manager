[
  {
    "path": "src/internal/symbol/iterator.ts",
    "lineNumber": 14,
    "name": "$$iterator",
    "kind": "VariableStatement",
    "code": "export const $$iterator = iterator;",
    "deprecationMessage": "/**\r\n * @deprecated use {@link iterator} instead\r\n */",
    "pos": [226, 279],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "574957826"
  },
  {
    "path": "src/internal/AsyncSubject.ts",
    "lineNumber": 17,
    "name": "AsyncSubject._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<any>): Subscription {\r\n    if (this.hasError) {\r\n      subscriber.error(this.thrownError);\r\n      return Subscription.EMPTY;\r\n    } else if (this.hasCompleted && this.hasNext) {\r\n      subscriber.next(this.value);\r\n      subscriber.complete();\r\n      return Subscription.EMPTY;\r\n    }\r\n    return super._subscribe(subscriber);\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [480, 553],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3280936764"
  },
  {
    "path": "src/internal/Subject.ts",
    "lineNumber": 108,
    "name": "Subject._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): Subscription {\r\n    if (this.closed) {\r\n      throw new ObjectUnsubscribedError();\r\n    } else if (this.hasError) {\r\n      subscriber.error(this.thrownError);\r\n      return Subscription.EMPTY;\r\n    } else if (this.isStopped) {\r\n      subscriber.complete();\r\n      return Subscription.EMPTY;\r\n    } else {\r\n      this.observers.push(subscriber);\r\n      return new SubjectSubscription(this, subscriber);\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [3066, 3139],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3122892035"
  },
  {
    "path": "src/internal/observable/ConnectableObservable.ts",
    "lineNumber": 23,
    "name": "ConnectableObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>) {\r\n    return this.getSubject().subscribe(subscriber);\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [683, 756],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1403524662"
  },
  {
    "path": "src/internal/observable/empty.ts",
    "lineNumber": 87,
    "name": "empty",
    "kind": "FunctionDeclaration",
    "code": "export function empty(scheduler?: SchedulerLike) {\r\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\r\n}",
    "deprecationMessage": "/**\r\n * Creates an Observable that emits no items to the Observer and immediately\r\n * emits a complete notification.\r\n *\r\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\r\n *\r\n * ![](empty.png)\r\n *\r\n * This static operator is useful for creating a simple Observable that only\r\n * emits the complete notification. It can be used for composing with other\r\n * Observables, such as in a {@link mergeMap}.\r\n *\r\n * ## Examples\r\n *\r\n * ### Emit the number 7, then complete\r\n *\r\n * ```ts\r\n * import { empty } from 'rxjs';\r\n * import { startWith } from 'rxjs/operators';\r\n *\r\n * const result = empty().pipe(startWith(7));\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Outputs\r\n * // 7\r\n * ```\r\n *\r\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\r\n *\r\n * ```ts\r\n * import { empty, interval, of } from 'rxjs';\r\n * import { mergeMap } from 'rxjs/operators';\r\n *\r\n * const interval$ = interval(1000);\r\n * const result = interval$.pipe(\r\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\r\n * );\r\n * result.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following to the console:\r\n * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\r\n * // x will occur every 1000ms\r\n * // if x % 2 is equal to 1, print a, b, c (each on its own)\r\n * // if x % 2 is not equal to 1, nothing will be output\r\n * ```\r\n *\r\n * @see {@link Observable}\r\n * @see {@link never}\r\n * @see {@link of}\r\n * @see {@link throwError}\r\n *\r\n * @param scheduler A {@link SchedulerLike} to use for scheduling\r\n * the emission of the complete notification.\r\n * @return An \"empty\" Observable: emits only the complete\r\n * notification.\r\n * @deprecated Deprecated in favor of using {@link EMPTY} constant, or {@link scheduled} (e.g. `scheduled([], scheduler)`)\r\n */",
    "pos": [699, 2502],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2612047371"
  },
  {
    "path": "src/internal/observable/never.ts",
    "lineNumber": 39,
    "name": "never",
    "kind": "FunctionDeclaration",
    "code": "export function never () {\r\n  return NEVER;\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated in favor of using {@link NEVER} constant.\r\n */",
    "pos": [1098, 1175],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "205305813"
  },
  {
    "path": "src/internal/observable/bindCallback.ts",
    "lineNumber": 9,
    "name": "bindCallback",
    "kind": "FunctionDeclaration",
    "code": "export function bindCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, use a mapping function. */",
    "pos": [262, 343],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2148544910"
  },
  {
    "path": "src/internal/observable/forkJoin.ts",
    "lineNumber": 40,
    "name": "forkJoin",
    "kind": "FunctionDeclaration",
    "code": "export function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;",
    "deprecationMessage": "/** @deprecated resultSelector is deprecated, pipe to map instead */",
    "pos": [3107, 3175],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3561101105"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 11,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [393, 441],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3161981293"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 13,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [528, 576],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2357638534"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 15,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [700, 748],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1057207500"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 17,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [909, 957],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1144339745"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 19,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [1155, 1203],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3319717293"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 21,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [1438, 1486],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1514640322"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 23,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [1759, 1807],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3547418940"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 25,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [1903, 1951],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2788882825"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 27,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [2080, 2128],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "237357052"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 29,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [2290, 2338],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2048105417"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 31,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [2533, 2581],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1992827580"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 33,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [2810, 2858],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1144505833"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 35,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, R>(array: ObservableInput<T>[]): OperatorFunction<T, Array<T>>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [2996, 3044],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2011917206"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 37,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, TOther, R>(array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated use {@link combineLatestWith} */",
    "pos": [3144, 3192],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3790257730"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 8,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link concatWith} */",
    "pos": [298, 353],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2884318784"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 10,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link concatWith} */",
    "pos": [439, 494],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3292931846"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 12,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link concatWith} */",
    "pos": [609, 664],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1636242211"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 14,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link concatWith} */",
    "pos": [813, 868],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2197155398"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 16,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link concatWith} */",
    "pos": [1051, 1106],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "966884963"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 18,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link concatWith} */",
    "pos": [1323, 1378],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2799738246"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 20,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link concatWith} */",
    "pos": [1629, 1684],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1348086706"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 22,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link concatWith} */",
    "pos": [1802, 1857],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1232091595"
  },
  {
    "path": "src/internal/operators/exhaustMap.ts",
    "lineNumber": 16,
    "name": "exhaustMap",
    "kind": "FunctionDeclaration",
    "code": "export function exhaustMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported. Use inner map instead. */",
    "pos": [912, 992],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3102687454"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 52,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T>(...observables: Array<ObservableInput<T> | SchedulerLike | number>): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [4335, 4378],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "404091489"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 54,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [4504, 4547],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2774012248"
  },
  {
    "path": "src/internal/operators/switchMapTo.ts",
    "lineNumber": 9,
    "name": "switchMapTo",
    "kind": "FunctionDeclaration",
    "code": "export function switchMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported. Switch to using switchMap with an inner map */",
    "pos": [457, 558],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2960162301"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 9,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, R>(project: (v1: T) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [320, 369],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "347474292"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 11,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, R>(v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [446, 495],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "572981215"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 13,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [609, 658],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "915247893"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 15,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [809, 858],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4072799032"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 17,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [1046, 1095],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2535893172"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 19,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): OperatorFunction<T, R> ;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [1320, 1369],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3291417883"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 21,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2>(v2: ObservableInput<T2>): OperatorFunction<T, [T, T2]>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [1632, 1681],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3325851685"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 23,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): OperatorFunction<T, [T, T2, T3]>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [1767, 1816],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1212020816"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 25,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): OperatorFunction<T, [T, T2, T3, T4]>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [1935, 1984],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "204312549"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 27,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): OperatorFunction<T, [T, T2, T3, T4, T5]>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [2136, 2185],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2997582992"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 29,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): OperatorFunction<T, [T, T2, T3, T4, T5, T6]> ;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [2370, 2419],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3692521893"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 31,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [2638, 2687],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4260257520"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 33,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, R>(array: Array<ObservableInput<T>>): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [2815, 2864],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1183059311"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 35,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, TOther, R>(array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link zipWith} */",
    "pos": [2952, 3001],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "79963334"
  },
  {
    "path": "src/internal/BehaviorSubject.ts",
    "lineNumber": 24,
    "name": "BehaviorSubject._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): Subscription {\r\n    const subscription = super._subscribe(subscriber);\r\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\r\n      subscriber.next(this._value);\r\n    }\r\n    return subscription;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [585, 658],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "628132186"
  },
  {
    "path": "src/internal/Subject.ts",
    "lineNumber": 99,
    "name": "Subject._trySubscribe",
    "kind": "MethodDeclaration",
    "code": "_trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\r\n    if (this.closed) {\r\n      throw new ObjectUnsubscribedError();\r\n    } else {\r\n      return super._trySubscribe(subscriber);\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [2785, 2858],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1871121614"
  },
  {
    "path": "src/internal/operators/delayWhen.ts",
    "lineNumber": 183,
    "name": "SubscriptionDelayObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>) {\r\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [7039, 7112],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3112183049"
  },
  {
    "path": "src/internal/operators/groupBy.ts",
    "lineNumber": 308,
    "name": "GroupedObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>) {\r\n    const subscription = new Subscription();\r\n    const { refCountSubscription, groupSubject } = this;\r\n    if (refCountSubscription && !refCountSubscription.closed) {\r\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\r\n    }\r\n    subscription.add(groupSubject.subscribe(subscriber));\r\n    return subscription;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [9710, 9783],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3823410848"
  },
  {
    "path": "src/internal/observable/fromEvent.ts",
    "lineNumber": 53,
    "name": "fromEvent",
    "kind": "FunctionDeclaration",
    "code": "export function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [2257, 2331],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1175002761"
  },
  {
    "path": "src/internal/types.ts",
    "lineNumber": 79,
    "name": "ObservableLike",
    "kind": "TypeAliasDeclaration",
    "code": "export type ObservableLike<T> = InteropObservable<T>;",
    "deprecationMessage": "/** @deprecated use {@link InteropObservable } */",
    "pos": [2516, 2565],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2363569391"
  },
  {
    "path": "src/internal/scheduler/AsyncScheduler.ts",
    "lineNumber": 13,
    "name": "AsyncScheduler.active",
    "kind": "PropertyDeclaration",
    "code": "public active: boolean = false;",
    "deprecationMessage": "/**\r\n   * A flag to indicate whether the Scheduler is currently executing a batch of\r\n   * queued actions.\r\n   * @type {boolean}\r\n   * @deprecated internal use only\r\n   */",
    "pos": [227, 398],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3028504973"
  },
  {
    "path": "src/internal/scheduler/AsyncScheduler.ts",
    "lineNumber": 21,
    "name": "AsyncScheduler.scheduled",
    "kind": "PropertyDeclaration",
    "code": "public scheduled: any = undefined;",
    "deprecationMessage": "/**\r\n   * An internal ID used to track the latest asynchronous task such as those\r\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\r\n   * others.\r\n   * @type {any}\r\n   * @deprecated internal use only\r\n   */",
    "pos": [437, 669],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3069133173"
  },
  {
    "path": "src/internal/operators/raceWith.ts",
    "lineNumber": 10,
    "name": "race",
    "kind": "FunctionDeclaration",
    "code": "export function race<T>(observables: Array<Observable<T>>): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link raceWith} */",
    "pos": [423, 473],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3316169867"
  },
  {
    "path": "src/internal/operators/raceWith.ts",
    "lineNumber": 12,
    "name": "race",
    "kind": "FunctionDeclaration",
    "code": "export function race<T, R>(observables: Array<Observable<T>>): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link raceWith} */",
    "pos": [565, 615],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2338269968"
  },
  {
    "path": "src/internal/operators/raceWith.ts",
    "lineNumber": 14,
    "name": "race",
    "kind": "FunctionDeclaration",
    "code": "export function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link raceWith} */",
    "pos": [705, 755],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3905662273"
  },
  {
    "path": "src/internal/operators/raceWith.ts",
    "lineNumber": 16,
    "name": "race",
    "kind": "FunctionDeclaration",
    "code": "export function race<T, R>(...observables: Array<Observable<any> | Array<Observable<any>>>): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated Deprecated use {@link raceWith} */",
    "pos": [873, 923],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3813750490"
  },
  {
    "path": "src/internal/operators/delayWhen.ts",
    "lineNumber": 11,
    "name": "delayWhen",
    "kind": "FunctionDeclaration",
    "code": "export function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<never>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated In future versions, empty notifiers will no longer re-emit the source value on the output observable. */",
    "pos": [428, 548],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "334407792"
  },
  {
    "path": "src/internal/Subject.ts",
    "lineNumber": 33,
    "name": "Subject.create",
    "kind": "PropertyDeclaration",
    "code": "static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\r\n    return new AnonymousSubject<T>(destination, source);\r\n  }",
    "deprecationMessage": "/**\r\n   * Creates a \"subject\" by basically gluing an observer to an observable.\r\n   *\r\n   * @nocollapse\r\n   * @deprecated Recommended you do not use, will be removed at some point in the future. Plans for replacement still under discussion.\r\n   */",
    "pos": [907, 1154],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3478784901"
  },
  {
    "path": "src/internal/types.ts",
    "lineNumber": 68,
    "name": "Subscribable.subscribe",
    "kind": "MethodSignature",
    "code": "subscribe(next: null | undefined, error: null | undefined, complete: () => void): Unsubscribable;",
    "deprecationMessage": "/** @deprecated Use an observer instead of a complete callback */",
    "pos": [1770, 1835],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2032731627"
  },
  {
    "path": "src/internal/types.ts",
    "lineNumber": 70,
    "name": "Subscribable.subscribe",
    "kind": "MethodSignature",
    "code": "subscribe(next: null | undefined, error: (error: any) => void, complete?: () => void): Unsubscribable;",
    "deprecationMessage": "/** @deprecated Use an observer instead of an error callback */",
    "pos": [1940, 2003],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2974577579"
  },
  {
    "path": "src/internal/types.ts",
    "lineNumber": 72,
    "name": "Subscribable.subscribe",
    "kind": "MethodSignature",
    "code": "subscribe(next: (value: T) => void, error: null | undefined, complete: () => void): Unsubscribable;",
    "deprecationMessage": "/** @deprecated Use an observer instead of a complete callback */",
    "pos": [2113, 2178],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "651866277"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 18,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, R>(sources: [O1], resultSelector: (v1: ObservedValueOf<O1>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [709, 783],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3169904309"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 20,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(sources: [O1, O2], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [958, 1032],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "397545158"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 22,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(sources: [O1, O2, O3], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [1269, 1343],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2753195669"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 24,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [1642, 1716],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1471930278"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 26,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4, O5], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [2077, 2151],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1429831989"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 28,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(sources: [O1, O2, O3, O4, O5, O6], resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [2574, 2648],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2135738822"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 30,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O extends ObservableInput<any>, R>(sources: O[], resultSelector: (...args: ObservedValueOf<O>[]) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [3133, 3207],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2478474764"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 34,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, R>(v1: O1, resultSelector: (v1: ObservedValueOf<O1>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [3434, 3508],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2069254298"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 36,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(v1: O1, v2: O2, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [3676, 3750],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2660366263"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 38,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [3984, 4058],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1194172507"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 40,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [4358, 4432],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2142537776"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 42,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [4798, 4872],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1492007258"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 44,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [5304, 5378],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3808605171"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 93,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O extends ObservableInput<any>, R>(array: O[], resultSelector: (...values: ObservedValueOf<O>[]) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [13139, 13213],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4061452740"
  },
  {
    "path": "src/internal/observable/fromEventPattern.ts",
    "lineNumber": 10,
    "name": "fromEventPattern",
    "kind": "FunctionDeclaration",
    "code": "export function fromEventPattern<T>(addHandler: (handler: NodeEventHandler) => any, removeHandler?: (handler: NodeEventHandler, signal?: any) => void, resultSelector?: (...args: any[]) => T): Observable<T>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [437, 511],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2343608883"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 9,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<O1 extends ObservableInput<any>, R>(v1: O1, resultSelector: (v1: ObservedValueOf<O1>) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [246, 323],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3417958753"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 134,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<O extends ObservableInput<any>, R>(array: O[], resultSelector: (...values: ObservedValueOf<O>[]) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [4417, 4494],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3869852991"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 136,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: any[]) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [4636, 4713],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1237067457"
  },
  {
    "path": "src/internal/operators/concatMap.ts",
    "lineNumber": 7,
    "name": "concatMap",
    "kind": "FunctionDeclaration",
    "code": "export function concatMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, use inner map instead */",
    "pos": [306, 382],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2793842633"
  },
  {
    "path": "src/internal/operators/concatMap.ts",
    "lineNumber": 9,
    "name": "concatMap",
    "kind": "FunctionDeclaration",
    "code": "export function concatMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) =>  O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, use inner map instead */",
    "pos": [556, 632],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3328625559"
  },
  {
    "path": "src/internal/operators/concatMapTo.ts",
    "lineNumber": 9,
    "name": "concatMapTo",
    "kind": "FunctionDeclaration",
    "code": "export function concatMapTo<T, R, O extends ObservableInput<any>>(observable: O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated */",
    "pos": [449, 467],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2000821824"
  },
  {
    "path": "src/internal/operators/exhaustMap.ts",
    "lineNumber": 14,
    "name": "exhaustMap",
    "kind": "FunctionDeclaration",
    "code": "export function exhaustMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported. Use inner map instead. */",
    "pos": [657, 737],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "398969947"
  },
  {
    "path": "src/internal/operators/mergeMap.ts",
    "lineNumber": 14,
    "name": "mergeMap",
    "kind": "FunctionDeclaration",
    "code": "export function mergeMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined, concurrent?: number): OperatorFunction<T, ObservedValueOf<O>>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, use inner map instead */",
    "pos": [676, 752],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1258886180"
  },
  {
    "path": "src/internal/operators/mergeMap.ts",
    "lineNumber": 16,
    "name": "mergeMap",
    "kind": "FunctionDeclaration",
    "code": "export function mergeMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, use inner map instead */",
    "pos": [946, 1022],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1167405018"
  },
  {
    "path": "src/internal/operators/mergeMapTo.ts",
    "lineNumber": 8,
    "name": "mergeMapTo",
    "kind": "FunctionDeclaration",
    "code": "export function mergeMapTo<T, R, O extends ObservableInput<any>>(innerObservable: O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated */",
    "pos": [345, 363],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3576459347"
  },
  {
    "path": "src/internal/operators/switchMap.ts",
    "lineNumber": 14,
    "name": "switchMap",
    "kind": "FunctionDeclaration",
    "code": "export function switchMap<T, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, use inner map instead */",
    "pos": [656, 735],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3610337455"
  },
  {
    "path": "src/internal/operators/switchMap.ts",
    "lineNumber": 16,
    "name": "switchMap",
    "kind": "FunctionDeclaration",
    "code": "export function switchMap<T, R, O extends ObservableInput<any>>(project: (value: T, index: number) => O, resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, use inner map instead */",
    "pos": [909, 988],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3765236209"
  },
  {
    "path": "src/internal/operators/tap.ts",
    "lineNumber": 11,
    "name": "tap",
    "kind": "FunctionDeclaration",
    "code": "export function tap<T>(next: null | undefined, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated Use an observer instead of a complete callback */",
    "pos": [383, 448],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "451014565"
  },
  {
    "path": "src/internal/operators/tap.ts",
    "lineNumber": 13,
    "name": "tap",
    "kind": "FunctionDeclaration",
    "code": "export function tap<T>(next: null | undefined, error: (error: any) => void, complete?: () => void): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated Use an observer instead of an error callback */",
    "pos": [575, 638],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1622378725"
  },
  {
    "path": "src/internal/operators/tap.ts",
    "lineNumber": 15,
    "name": "tap",
    "kind": "FunctionDeclaration",
    "code": "export function tap<T>(next: (value: T) => void, error: null | undefined, complete: () => void): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated Use an observer instead of a complete callback */",
    "pos": [770, 835],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "35746059"
  },
  {
    "path": "src/internal/operators/timeInterval.ts",
    "lineNumber": 72,
    "name": "TimeInterval",
    "kind": "ClassDeclaration",
    "code": "export class TimeInterval<T> {\r\n  constructor(public value: T, public interval: number) {}\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated exposed API, use as interface only.\r\n */",
    "pos": [2495, 2555],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3634627573"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 48,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>>(sources: [O1], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>]>;",
    "deprecationMessage": "/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */",
    "pos": [5912, 6027],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1311330055"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 50,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(sources: [O1, O2], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;",
    "deprecationMessage": "/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */",
    "pos": [6170, 6285],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1576122666"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 52,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(sources: [O1, O2, O3], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;",
    "deprecationMessage": "/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */",
    "pos": [6486, 6601],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "29357286"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 54,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(sources: [O1, O2, O3, O4], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;",
    "deprecationMessage": "/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */",
    "pos": [6860, 6975],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2697395053"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 56,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;",
    "deprecationMessage": "/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */",
    "pos": [7292, 7407],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2721748487"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 58,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(sources: [O1, O2, O3, O4, O5, O6], scheduler: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;",
    "deprecationMessage": "/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */",
    "pos": [7782, 7897],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "794289710"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 60,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O extends ObservableInput<any>>(sources: O[], scheduler: SchedulerLike): Observable<ObservedValueOf<O>[]>;",
    "deprecationMessage": "/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */",
    "pos": [8330, 8445],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1479525750"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 74,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>>(v1: O1, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>]>;",
    "deprecationMessage": "/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */",
    "pos": [10425, 10511],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "536930967"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 76,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>]>;",
    "deprecationMessage": "/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */",
    "pos": [10648, 10734],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "494577860"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 78,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>]>;",
    "deprecationMessage": "/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */",
    "pos": [10933, 11019],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2131299159"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 80,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>]>;",
    "deprecationMessage": "/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */",
    "pos": [11280, 11366],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2226537924"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 82,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>]>;",
    "deprecationMessage": "/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */",
    "pos": [11689, 11775],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3099364311"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 84,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, scheduler?: SchedulerLike): Observable<[ObservedValueOf<O1>, ObservedValueOf<O2>, ObservedValueOf<O3>, ObservedValueOf<O4>, ObservedValueOf<O5>, ObservedValueOf<O6>]>;",
    "deprecationMessage": "/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */",
    "pos": [12160, 12246],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1536897796"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 87,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O extends ObservableInput<any>>(...observables: O[]): Observable<any[]>;",
    "deprecationMessage": "/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */",
    "pos": [12695, 12781],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2791148522"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 90,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O extends ObservableInput<any>, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;",
    "deprecationMessage": "/** @deprecated Pass arguments in a single array instead `combineLatest([a, b, c])` */",
    "pos": [12889, 12975],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2641145983"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 96,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O extends ObservableInput<any>>(...observables: Array<O | SchedulerLike>): Observable<any[]>;",
    "deprecationMessage": "/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */",
    "pos": [13394, 13509],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2252275703"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 99,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<O extends ObservableInput<any>, R>(...observables: Array<O | ((...values: ObservedValueOf<O>[]) => R) | SchedulerLike>): Observable<R>;",
    "deprecationMessage": "/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */",
    "pos": [13638, 13753],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3908362141"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 102,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;",
    "deprecationMessage": "/** @deprecated Passing a scheduler here is deprecated, use {@link subscribeOn} and/or {@link observeOn} instead */",
    "pos": [13924, 14039],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1942601598"
  },
  {
    "path": "src/internal/observable/concat.ts",
    "lineNumber": 8,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<O1 extends ObservableInput<any>>(v1: O1, scheduler: SchedulerLike): Observable<ObservedValueOf<O1>>;",
    "deprecationMessage": "/** @deprecated remove in v8. Passing a scheduler to concat is deprecated, please use {@link scheduled} and {@link concatAll} `scheduled([o1, o2], scheduler).pipe(concatAll())` */",
    "pos": [272, 451],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2341648288"
  },
  {
    "path": "src/internal/observable/concat.ts",
    "lineNumber": 10,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>>(v1: O1, v2: O2, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2>>;",
    "deprecationMessage": "/** @deprecated remove in v8. Passing a scheduler to concat is deprecated, please use {@link scheduled} and {@link concatAll} `scheduled([o1, o2], scheduler).pipe(concatAll())` */",
    "pos": [578, 757],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2264975811"
  },
  {
    "path": "src/internal/observable/concat.ts",
    "lineNumber": 12,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3>>;",
    "deprecationMessage": "/** @deprecated remove in v8. Passing a scheduler to concat is deprecated, please use {@link scheduled} and {@link concatAll} `scheduled([o1, o2], scheduler).pipe(concatAll())` */",
    "pos": [947, 1126],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2095828768"
  },
  {
    "path": "src/internal/observable/concat.ts",
    "lineNumber": 14,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4>>;",
    "deprecationMessage": "/** @deprecated remove in v8. Passing a scheduler to concat is deprecated, please use {@link scheduled} and {@link concatAll} `scheduled([o1, o2], scheduler).pipe(concatAll())` */",
    "pos": [1379, 1558],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4152251907"
  },
  {
    "path": "src/internal/observable/concat.ts",
    "lineNumber": 16,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4> | ObservedValueOf<O5>>;",
    "deprecationMessage": "/** @deprecated remove in v8. Passing a scheduler to concat is deprecated, please use {@link scheduled} and {@link concatAll} `scheduled([o1, o2], scheduler).pipe(concatAll())` */",
    "pos": [1874, 2053],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2777376224"
  },
  {
    "path": "src/internal/observable/concat.ts",
    "lineNumber": 18,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, scheduler: SchedulerLike): Observable<ObservedValueOf<O1> | ObservedValueOf<O2> | ObservedValueOf<O3> | ObservedValueOf<O4> | ObservedValueOf<O5> | ObservedValueOf<O6>>;",
    "deprecationMessage": "/** @deprecated remove in v8. Passing a scheduler to concat is deprecated, please use {@link scheduled} and {@link concatAll} `scheduled([o1, o2], scheduler).pipe(concatAll())` */",
    "pos": [2432, 2611],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "299767555"
  },
  {
    "path": "src/internal/observable/forkJoin.ts",
    "lineNumber": 12,
    "name": "forkJoin",
    "kind": "FunctionDeclaration",
    "code": "export function forkJoin<T>(v1: SubscribableOrPromise<T>): Observable<[T]>;",
    "deprecationMessage": "/** @deprecated Use the version that takes an array of Observables instead */",
    "pos": [389, 466],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2410649164"
  },
  {
    "path": "src/internal/observable/forkJoin.ts",
    "lineNumber": 14,
    "name": "forkJoin",
    "kind": "FunctionDeclaration",
    "code": "export function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;",
    "deprecationMessage": "/** @deprecated Use the version that takes an array of Observables instead */",
    "pos": [545, 622],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "430670591"
  },
  {
    "path": "src/internal/observable/forkJoin.ts",
    "lineNumber": 16,
    "name": "forkJoin",
    "kind": "FunctionDeclaration",
    "code": "export function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;",
    "deprecationMessage": "/** @deprecated Use the version that takes an array of Observables instead */",
    "pos": [728, 805],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4021153834"
  },
  {
    "path": "src/internal/observable/forkJoin.ts",
    "lineNumber": 18,
    "name": "forkJoin",
    "kind": "FunctionDeclaration",
    "code": "export function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;",
    "deprecationMessage": "/** @deprecated Use the version that takes an array of Observables instead */",
    "pos": [944, 1021],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "777003711"
  },
  {
    "path": "src/internal/observable/forkJoin.ts",
    "lineNumber": 20,
    "name": "forkJoin",
    "kind": "FunctionDeclaration",
    "code": "export function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;",
    "deprecationMessage": "/** @deprecated Use the version that takes an array of Observables instead */",
    "pos": [1193, 1270],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "858552106"
  },
  {
    "path": "src/internal/observable/forkJoin.ts",
    "lineNumber": 22,
    "name": "forkJoin",
    "kind": "FunctionDeclaration",
    "code": "export function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;",
    "deprecationMessage": "/** @deprecated Use the version that takes an array of Observables instead */",
    "pos": [1475, 1552],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "790288639"
  },
  {
    "path": "src/internal/observable/forkJoin.ts",
    "lineNumber": 42,
    "name": "forkJoin",
    "kind": "FunctionDeclaration",
    "code": "export function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;",
    "deprecationMessage": "/** @deprecated Use the version that takes an array of Observables instead */",
    "pos": [3268, 3345],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1538846219"
  },
  {
    "path": "src/internal/observable/from.ts",
    "lineNumber": 8,
    "name": "from",
    "kind": "FunctionDeclaration",
    "code": "export function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike): Observable<ObservedValueOf<O>>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} instead. */",
    "pos": [326, 375],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2552084898"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 9,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T>(v1: ObservableInput<T>, scheduler: SchedulerLike): Observable<T>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [289, 411],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1999944539"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 11,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T>(v1: ObservableInput<T>, concurrent: number, scheduler: SchedulerLike): Observable<T>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [505, 627],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2332939429"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 13,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler: SchedulerLike): Observable<T | T2>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [741, 863],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "997661150"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 15,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [991, 1113],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2563666208"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 17,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler: SchedulerLike): Observable<T | T2 | T3>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [1261, 1383],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "876187259"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 19,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [1545, 1667],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3328135301"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 21,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [1849, 1971],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3570025470"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 23,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [2167, 2289],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2571205248"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 25,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [2505, 2627],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "411655387"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 27,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [2857, 2979],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3916627237"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 29,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [3229, 3351],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "57731166"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 31,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent: number, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [3615, 3737],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3409590944"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 47,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T>(...observables: (ObservableInput<T> | SchedulerLike | number)[]): Observable<T>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [6052, 6174],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1303731761"
  },
  {
    "path": "src/internal/observable/merge.ts",
    "lineNumber": 50,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, R>(...observables: (ObservableInput<any> | SchedulerLike | number)[]): Observable<R>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link mergeAll} (e.g. `scheduled([ob1, ob2, ob3], scheduler).pipe(mergeAll())*/",
    "pos": [6379, 6501],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3833153771"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 11,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T>(a: T, scheduler: SchedulerLike): Observable<T>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */",
    "pos": [456, 552],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2042971501"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 13,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T, T2>(a: T, b: T2, scheduler: SchedulerLike): Observable<T | T2>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */",
    "pos": [625, 721],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2896509263"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 15,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler: SchedulerLike): Observable<T | T2 | T3>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */",
    "pos": [810, 906],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3189558957"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 17,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */",
    "pos": [1011, 1107],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3425923599"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 19,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */",
    "pos": [1228, 1324],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1659855789"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 21,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */",
    "pos": [1461, 1557],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1235854735"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 23,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler: SchedulerLike):\r\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */",
    "pos": [1710, 1806],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3677261863"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 26,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler: SchedulerLike):\r\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */",
    "pos": [1978, 2074],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3820249861"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 29,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler: SchedulerLike):\r\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */",
    "pos": [2262, 2358],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3415804935"
  },
  {
    "path": "src/internal/operators/endWith.ts",
    "lineNumber": 8,
    "name": "endWith",
    "kind": "FunctionDeclaration",
    "code": "export function endWith<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */",
    "pos": [276, 407],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1346723782"
  },
  {
    "path": "src/internal/operators/endWith.ts",
    "lineNumber": 10,
    "name": "endWith",
    "kind": "FunctionDeclaration",
    "code": "export function endWith<T, A>(v1: A, scheduler: SchedulerLike): OperatorFunction<T, T | A>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */",
    "pos": [493, 624],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2032252389"
  },
  {
    "path": "src/internal/operators/endWith.ts",
    "lineNumber": 12,
    "name": "endWith",
    "kind": "FunctionDeclaration",
    "code": "export function endWith<T, A, B>(v1: A, v2: B, scheduler: SchedulerLike): OperatorFunction<T, T | A | B>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */",
    "pos": [719, 850],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3693559365"
  },
  {
    "path": "src/internal/operators/endWith.ts",
    "lineNumber": 14,
    "name": "endWith",
    "kind": "FunctionDeclaration",
    "code": "export function endWith<T, A, B, C>(v1: A, v2: B, v3: C, scheduler: SchedulerLike): OperatorFunction<T, T | A | B | C>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */",
    "pos": [959, 1090],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "232750949"
  },
  {
    "path": "src/internal/operators/endWith.ts",
    "lineNumber": 16,
    "name": "endWith",
    "kind": "FunctionDeclaration",
    "code": "export function endWith<T, A, B, C, D>(v1: A, v2: B, v3: C, v4: D, scheduler: SchedulerLike): OperatorFunction<T, T | A | B | C | D>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */",
    "pos": [1213, 1344],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "220518245"
  },
  {
    "path": "src/internal/operators/endWith.ts",
    "lineNumber": 18,
    "name": "endWith",
    "kind": "FunctionDeclaration",
    "code": "export function endWith<T, A, B, C, D, E>(v1: A, v2: B, v3: C, v4: D, v5: E, scheduler: SchedulerLike): OperatorFunction<T, T | A | B | C | D | E>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */",
    "pos": [1481, 1612],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2689983333"
  },
  {
    "path": "src/internal/operators/endWith.ts",
    "lineNumber": 20,
    "name": "endWith",
    "kind": "FunctionDeclaration",
    "code": "export function endWith<T, A, B, C, D, E, F>(v1: A, v2: B, v3: C, v4: D, v5: E, v6: F, scheduler: SchedulerLike): OperatorFunction<T, T | A | B | C | D | E | F>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */",
    "pos": [1763, 1894],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1426544709"
  },
  {
    "path": "src/internal/operators/partition.ts",
    "lineNumber": 53,
    "name": "partition",
    "kind": "FunctionDeclaration",
    "code": "export function partition<T>(predicate: (value: T, index: number) => boolean,\r\n                             thisArg?: any): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\r\n  return (source: Observable<T>) => [\r\n    filter(predicate, thisArg)(source),\r\n    filter(not(predicate, thisArg) as any)(source)\r\n  ] as [Observable<T>, Observable<T>];\r\n}",
    "deprecationMessage": "/**\r\n * Splits the source Observable into two, one with values that satisfy a\r\n * predicate, and another with values that don't satisfy the predicate.\r\n *\r\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\r\n * one like the output of {@link filter}, and the other with values that did not\r\n * pass the condition.</span>\r\n *\r\n * ![](partition.png)\r\n *\r\n * `partition` outputs an array with two Observables that partition the values\r\n * from the source Observable through the given `predicate` function. The first\r\n * Observable in that array emits source values for which the predicate argument\r\n * returns true. The second Observable emits source values for which the\r\n * predicate returns false. The first behaves like {@link filter} and the second\r\n * behaves like {@link filter} with the predicate negated.\r\n *\r\n * ## Example\r\n * Partition click events into those on DIV elements and those elsewhere\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { partition } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const parts = clicks.pipe(partition(ev => ev.target.tagName === 'DIV'));\r\n * const clicksOnDivs = parts[0];\r\n * const clicksElsewhere = parts[1];\r\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\r\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\r\n * ```\r\n *\r\n * @see {@link filter}\r\n *\r\n * @param {function(value: T, index: number): boolean} predicate A function that\r\n * evaluates each value emitted by the source Observable. If it returns `true`,\r\n * the value is emitted on the first Observable in the returned array, if\r\n * `false` the value is emitted on the second Observable in the array. The\r\n * `index` parameter is the number `i` for the i-th source emission that has\r\n * happened since the subscription, starting from the number `0`.\r\n * @param {any} [thisArg] An optional argument to determine the value of `this`\r\n * in the `predicate` function.\r\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\r\n * with values that passed the predicate, and another with values that did not\r\n * pass the predicate.\r\n * @name partition\r\n * @deprecated use `partition` static creation function instead\r\n */",
    "pos": [162, 2417],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2959945421"
  },
  {
    "path": "src/internal/operators/startWith.ts",
    "lineNumber": 8,
    "name": "startWith",
    "kind": "FunctionDeclaration",
    "code": "export function startWith<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */",
    "pos": [288, 419],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2797062985"
  },
  {
    "path": "src/internal/operators/startWith.ts",
    "lineNumber": 10,
    "name": "startWith",
    "kind": "FunctionDeclaration",
    "code": "export function startWith<T, D>(v1: D, scheduler: SchedulerLike): OperatorFunction<T, T | D>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */",
    "pos": [507, 638],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4167466095"
  },
  {
    "path": "src/internal/operators/startWith.ts",
    "lineNumber": 12,
    "name": "startWith",
    "kind": "FunctionDeclaration",
    "code": "export function startWith<T, D, E>(v1: D, v2: E, scheduler: SchedulerLike): OperatorFunction<T, T | D | E>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */",
    "pos": [735, 866],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2841277224"
  },
  {
    "path": "src/internal/operators/startWith.ts",
    "lineNumber": 14,
    "name": "startWith",
    "kind": "FunctionDeclaration",
    "code": "export function startWith<T, D, E, F>(v1: D, v2: E, v3: F, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */",
    "pos": [977, 1108],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "403593229"
  },
  {
    "path": "src/internal/operators/startWith.ts",
    "lineNumber": 16,
    "name": "startWith",
    "kind": "FunctionDeclaration",
    "code": "export function startWith<T, D, E, F, G>(v1: D, v2:  E, v3: F, v4: G, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */",
    "pos": [1233, 1364],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3398804142"
  },
  {
    "path": "src/internal/operators/startWith.ts",
    "lineNumber": 18,
    "name": "startWith",
    "kind": "FunctionDeclaration",
    "code": "export function startWith<T, D, E, F, G, H>(v1: D, v2: E, v3: F, v4: G, v5: H, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G | H>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */",
    "pos": [1504, 1635],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1981966371"
  },
  {
    "path": "src/internal/operators/startWith.ts",
    "lineNumber": 20,
    "name": "startWith",
    "kind": "FunctionDeclaration",
    "code": "export function startWith<T, D, E, F, G, H, I>(v1: D, v2: E, v3: F, v4: G, v5: H, v6: I, scheduler: SchedulerLike): OperatorFunction<T, T | D | E | F | G | H | I>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */",
    "pos": [1788, 1919],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4185955948"
  },
  {
    "path": "src/internal/Notification.ts",
    "lineNumber": 17,
    "name": "NotificationKind",
    "kind": "EnumDeclaration",
    "code": "export enum NotificationKind {\r\n  NEXT = 'N',\r\n  ERROR = 'E',\r\n  COMPLETE = 'C',\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated NotificationKind is deprecated as const enums are not compatible with isolated modules. Use a string literal instead.\r\n */",
    "pos": [407, 549],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4099293182"
  },
  {
    "path": "src/internal/operators/mergeMap.ts",
    "lineNumber": 166,
    "name": "flatMap",
    "kind": "VariableStatement",
    "code": "export const flatMap = mergeMap;",
    "deprecationMessage": "/**\r\n * @deprecated renamed. Use {@link mergeMap}.\r\n */",
    "pos": [6020, 6075],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "954656805"
  },
  {
    "path": "src/internal/scheduler/animationFrame.ts",
    "lineNumber": 41,
    "name": "animationFrame",
    "kind": "VariableStatement",
    "code": "export const animationFrame = animationFrameScheduler;",
    "deprecationMessage": "/**\r\n * @deprecated renamed. Use {@link animationFrameScheduler}.\r\n */",
    "pos": [1301, 1371],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3187957557"
  },
  {
    "path": "src/internal/scheduler/asap.ts",
    "lineNumber": 44,
    "name": "asap",
    "kind": "VariableStatement",
    "code": "export const asap = asapScheduler;",
    "deprecationMessage": "/**\r\n * @deprecated Renamed. Use {@link asapScheduler}.\r\n */",
    "pos": [1657, 1717],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2810386485"
  },
  {
    "path": "src/internal/scheduler/async.ts",
    "lineNumber": 56,
    "name": "async",
    "kind": "VariableStatement",
    "code": "export const async = asyncScheduler;",
    "deprecationMessage": "/**\r\n * @deprecated Renamed. Use {@link asyncScheduler}.\r\n */",
    "pos": [1496, 1557],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1550641269"
  },
  {
    "path": "src/internal/scheduler/queue.ts",
    "lineNumber": 72,
    "name": "queue",
    "kind": "VariableStatement",
    "code": "export const queue = queueScheduler;",
    "deprecationMessage": "/**\r\n * @deprecated renamed. Use {@link queueScheduler}.\r\n */",
    "pos": [2049, 2110],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "418816949"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 9,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of(scheduler: SchedulerLike): Observable<never>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use {@link scheduled} instead `scheduled([], scheduler)` */",
    "pos": [299, 388],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "239434502"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 35,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T>(): Observable<T>;",
    "deprecationMessage": "/** @deprecated remove in v8. Do not use generic arguments directly, allow inference or cast with `as` */",
    "pos": [2682, 2787],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1228483487"
  },
  {
    "path": "src/internal/scheduler/VirtualTimeScheduler.ts",
    "lineNumber": 9,
    "name": "VirtualTimeScheduler.frameTimeFactor",
    "kind": "PropertyDeclaration",
    "code": "static frameTimeFactor = 10;",
    "deprecationMessage": "/** @deprecated remove in v8. `frameTimeFactor` is not used in VirtualTimeScheduler directly. */",
    "pos": [258, 354],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "458311775"
  },
  {
    "path": "src/internal/scheduler/VirtualTimeScheduler.ts",
    "lineNumber": 23,
    "name": "VirtualTimeScheduler.index",
    "kind": "PropertyDeclaration",
    "code": "public index: number = -1;",
    "deprecationMessage": "/**\r\n   * Used internally to examine the current virtual action index being processed.\r\n   * @deprecated remove in v8. Should be a private API.\r\n   */",
    "pos": [771, 921],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "364879577"
  },
  {
    "path": "src/internal/Subject.ts",
    "lineNumber": 167,
    "name": "AnonymousSubject._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): Subscription {\r\n    const { source } = this;\r\n    if (source) {\r\n      return this.source!.subscribe(subscriber);\r\n    } else {\r\n      return Subscription.EMPTY;\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [4698, 4771],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "215162729"
  },
  {
    "path": "src/internal/types.ts",
    "lineNumber": 195,
    "name": "ObservedValuesFromArray",
    "kind": "TypeAliasDeclaration",
    "code": "export type ObservedValuesFromArray<X> = ObservedValueUnionFromArray<X>;",
    "deprecationMessage": "/** @deprecated use {@link ObservedValueUnionFromArray} */",
    "pos": [5749, 5807],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "333925887"
  },
  {
    "path": "src/internal/observable/fromEvent.ts",
    "lineNumber": 50,
    "name": "fromEvent",
    "kind": "FunctionDeclaration",
    "code": "export function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector?: (...args: any[]) => T): Observable<T>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [1923, 1997],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3829078162"
  },
  {
    "path": "src/internal/operators/mapTo.ts",
    "lineNumber": 9,
    "name": "mapTo",
    "kind": "FunctionDeclaration",
    "code": "export function mapTo<T, R>(value: R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated remove in v8. Use mapTo<R>(value: R): OperatorFunction<any, R> signature instead **/",
    "pos": [280, 380],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2395840069"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 9,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T>(): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated use {@link mergeWith} */",
    "pos": [325, 365],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4126383202"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 11,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2>(v2: ObservableInput<T2>, ): OperatorFunction<T, T | T2>;",
    "deprecationMessage": "/** @deprecated use {@link mergeWith} */",
    "pos": [425, 465],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1288334116"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 13,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, ): OperatorFunction<T, T | T2 | T3>;",
    "deprecationMessage": "/** @deprecated use {@link mergeWith} */",
    "pos": [554, 594],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4126412449"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 15,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, ): OperatorFunction<T, T | T2 | T3 | T4>;",
    "deprecationMessage": "/** @deprecated use {@link mergeWith} */",
    "pos": [717, 757],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1579861924"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 17,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, ): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
    "deprecationMessage": "/** @deprecated use {@link mergeWith} */",
    "pos": [914, 954],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4258329377"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 19,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, ): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
    "deprecationMessage": "/** @deprecated use {@link mergeWith} */",
    "pos": [1145, 1185],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1392451876"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 28,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [1715, 1758],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2402146579"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 30,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T>(concurrent: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [1842, 1885],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4144544914"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 32,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2>(v2: ObservableInput<T2>, scheduler: SchedulerLike): OperatorFunction<T, T | T2>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [1990, 2033],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "126078709"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 34,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2>(v2: ObservableInput<T2>, concurrent: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [2146, 2189],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "14864468"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 36,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler: SchedulerLike): OperatorFunction<T, T | T2 | T3>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [2323, 2366],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3479508240"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 38,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [2513, 2556],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1985833809"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 40,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [2724, 2767],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3136977621"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 42,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [2948, 2991],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1771322580"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 44,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [3193, 3236],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3444206704"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 46,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [3451, 3494],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4007718609"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 48,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [3730, 3773],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2953897461"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 50,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
    "deprecationMessage": "/** @deprecated use static {@link merge} */",
    "pos": [4022, 4065],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1059700436"
  },
  {
    "path": "src/internal/Notification.ts",
    "lineNumber": 38,
    "name": "Notification",
    "kind": "ClassDeclaration",
    "code": "export class Notification<T> {\r\n  /**\r\n   * A value signifying that the notification will \"next\" if observed. In truth,\r\n   * This is really synonomous with just checking `kind === \"N\"`.\r\n   * @deprecated remove in v8. Instead, just check to see if the value of `kind` is `\"N\"`.\r\n   */\r\n  readonly hasValue: boolean;\r\n\r\n  /**\r\n   * Creates a \"Next\" notification object.\r\n   * @param kind Always `'N'`\r\n   * @param value The value to notify with if observed.\r\n   * @deprecated internal as of v8. Use {@link createNext} instead.\r\n   */\r\n  constructor(kind: 'N', value?: T);\r\n  /**\r\n   * Creates an \"Error\" notification object.\r\n   * @param kind Always `'E'`\r\n   * @param value Always `undefined`\r\n   * @param error The error to notify with if observed.\r\n   * @deprecated internal as of v8. Use {@link createError} instead.\r\n   */\r\n  constructor(kind: 'E', value: undefined, error: any);\r\n  /**\r\n   * Creates a \"completion\" notification object.\r\n   * @param kind Always `'C'`\r\n   * @deprecated internal as of v8. Use {@link createComplete} instead.\r\n   */\r\n  constructor(kind: 'C');\r\n  constructor(public readonly kind: 'N' | 'E' | 'C', public readonly value?: T, public readonly error?: any) {\r\n    this.hasValue = kind === 'N';\r\n  }\r\n\r\n  /**\r\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\r\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\r\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\r\n   * @param observer The observer to notify.\r\n   */\r\n  observe(observer: PartialObserver<T>): void {\r\n    switch (this.kind) {\r\n      case 'N':\r\n        observer.next?.(this.value!);\r\n        break;\r\n      case 'E':\r\n        observer.error?.(this.error);\r\n        break;\r\n      case 'C':\r\n        observer.complete?.();\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes a notification on the appropriate handler from a list provided.\r\n   * If a handler is missing for the kind of notification, nothing is called\r\n   * and no error is thrown, it will be a noop.\r\n   * @param next A next handler\r\n   * @param error An error handler\r\n   * @param complete A complete handler\r\n   * @deprecated remove in v8. use {@link Notification.prototype.observe} instead.\r\n   */\r\n  do(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\r\n  /**\r\n   * Executes a notification on the appropriate handler from a list provided.\r\n   * If a handler is missing for the kind of notification, nothing is called\r\n   * and no error is thrown, it will be a noop.\r\n   * @param next A next handler\r\n   * @param error An error handler\r\n   * @deprecated remove in v8. use {@link Notification.prototype.observe} instead.\r\n   */\r\n  do(next: (value: T) => void, error: (err: any) => void): void;\r\n  /**\r\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\r\n   * this will not error, and it will be a noop.\r\n   * @param next The next handler\r\n   * @deprecated remove in v8. use {@link Notification.prototype.observe} instead.\r\n   */\r\n  do(next: (value: T) => void): void;\r\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): void {\r\n    const kind = this.kind;\r\n    switch (kind) {\r\n      case 'N':\r\n        next?.(this.value!);\r\n        break;\r\n      case 'E':\r\n        error?.(this.error);\r\n        break;\r\n      case 'C':\r\n        complete?.();\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes a notification on the appropriate handler from a list provided.\r\n   * If a handler is missing for the kind of notification, nothing is called\r\n   * and no error is thrown, it will be a noop.\r\n   * @param next A next handler\r\n   * @param error An error handler\r\n   * @param complete A complete handler\r\n   * @deprecated remove in v8. use {@link Notification.prototype.observe} instead.\r\n   */\r\n  accept(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\r\n  /**\r\n   * Executes a notification on the appropriate handler from a list provided.\r\n   * If a handler is missing for the kind of notification, nothing is called\r\n   * and no error is thrown, it will be a noop.\r\n   * @param next A next handler\r\n   * @param error An error handler\r\n   * @deprecated remove in v8. use {@link Notification.prototype.observe} instead.\r\n   */\r\n  accept(next: (value: T) => void, error: (err: any) => void): void;\r\n  /**\r\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\r\n   * this will not error, and it will be a noop.\r\n   * @param next The next handler\r\n   * @deprecated remove in v8. use {@link Notification.prototype.observe} instead.\r\n   */\r\n  accept(next: (value: T) => void): void;\r\n\r\n  /**\r\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\r\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\r\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\r\n   * @param observer The observer to notify.\r\n   * @deprecated remove in v8. Use {@link Notification.prototype.observe} instead.\r\n   */\r\n  accept(observer: PartialObserver<T>): void;\r\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\r\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\r\n      return this.observe(<PartialObserver<T>>nextOrObserver);\r\n    } else {\r\n      return this.do(<(value: T) => void>nextOrObserver, error as any, complete as any);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a simple Observable that just delivers the notification represented\r\n   * by this Notification instance.\r\n   *\r\n   * @deprecated remove in v8. In order to accomplish converting `Notification` to an {@link Observable}\r\n   * you may use {@link of} and {@link dematerialize}: `of(notification).pipe(dematerialize())`. This is\r\n   * being removed as it has limited usefulness, and we're trying to streamline the library.\r\n   */\r\n  toObservable(): Observable<T> {\r\n    const kind = this.kind;\r\n    switch (kind) {\r\n      case 'N':\r\n        return of(this.value!);\r\n      case 'E':\r\n        return throwError(this.error);\r\n      case 'C':\r\n        return EMPTY;\r\n    }\r\n    throw new Error('unexpected notification kind value');\r\n  }\r\n\r\n  private static completeNotification = new Notification('C') as Notification<never> & CompleteNotification;\r\n  /**\r\n   * A shortcut to create a Notification instance of the type `next` from a\r\n   * given value.\r\n   * @param {T} value The `next` value.\r\n   * @return {Notification<T>} The \"next\" Notification representing the\r\n   * argument.\r\n   * @nocollapse\r\n   * @deprecated remove in v8. It is NOT recommended to create instances of `Notification` directly\r\n   * and use them. Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\n   * For example: `{ kind: 'N', value: 1 }`, `{kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\n   */\r\n  static createNext<T>(value: T) {\r\n    return new Notification('N', value) as Notification<T> & NextNotification<T>;\r\n  }\r\n\r\n  /**\r\n   * A shortcut to create a Notification instance of the type `error` from a\r\n   * given error.\r\n   * @param {any} [err] The `error` error.\r\n   * @return {Notification<T>} The \"error\" Notification representing the\r\n   * argument.\r\n   * @nocollapse\r\n   * @deprecated remove in v8. It is NOT recommended to create instances of `Notification` directly\r\n   * and use them. Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\n   * For example: `{ kind: 'N', value: 1 }`, `{kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\n   */\r\n  static createError(err?: any) {\r\n    return new Notification('E', undefined, err) as Notification<never> & ErrorNotification;\r\n  }\r\n\r\n  /**\r\n   * A shortcut to create a Notification instance of the type `complete`.\r\n   * @return {Notification<any>} The valueless \"complete\" Notification.\r\n   * @nocollapse\r\n   * @deprecated remove in v8. It is NOT recommended to create instances of `Notification` directly\r\n   * and use them. Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\n   * For example: `{ kind: 'N', value: 1 }`, `{kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\n   */\r\n  static createComplete(): Notification<never> & CompleteNotification {\r\n    return Notification.completeNotification;\r\n  }\r\n}",
    "deprecationMessage": "/**\r\n * Represents a push-based event or value that an {@link Observable} can emit.\r\n * This class is particularly useful for operators that manage notifications,\r\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\r\n * others. Besides wrapping the actual delivered value, it also annotates it\r\n * with metadata of, for instance, what type of push message it is (`next`,\r\n * `error`, or `complete`).\r\n *\r\n * @see {@link materialize}\r\n * @see {@link dematerialize}\r\n * @see {@link observeOn}\r\n * @deprecated remove in v8. It is NOT recommended to create instances of `Notification` directly\r\n * and use them. Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\n * For example: `{ kind: 'N', value: 1 }`, `{kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\n */",
    "pos": [638, 1473],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "772797354"
  },
  {
    "path": "src/internal/Notification.ts",
    "lineNumber": 44,
    "name": "Notification.hasValue",
    "kind": "PropertyDeclaration",
    "code": "readonly hasValue: boolean;",
    "deprecationMessage": "/**\r\n   * A value signifying that the notification will \"next\" if observed. In truth,\r\n   * This is really synonomous with just checking `kind === \"N\"`.\r\n   * @deprecated remove in v8. Instead, just check to see if the value of `kind` is `\"N\"`.\r\n   */",
    "pos": [1509, 1760],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "595892215"
  },
  {
    "path": "src/internal/Notification.ts",
    "lineNumber": 183,
    "name": "Notification.toObservable",
    "kind": "MethodDeclaration",
    "code": "toObservable(): Observable<T> {\r\n    const kind = this.kind;\r\n    switch (kind) {\r\n      case 'N':\r\n        return of(this.value!);\r\n      case 'E':\r\n        return throwError(this.error);\r\n      case 'C':\r\n        return EMPTY;\r\n    }\r\n    throw new Error('unexpected notification kind value');\r\n  }",
    "deprecationMessage": "/**\r\n   * Returns a simple Observable that just delivers the notification represented\r\n   * by this Notification instance.\r\n   *\r\n   * @deprecated remove in v8. In order to accomplish converting `Notification` to an {@link Observable}\r\n   * you may use {@link of} and {@link dematerialize}: `of(notification).pipe(dematerialize())`. This is\r\n   * being removed as it has limited usefulness, and we're trying to streamline the library.\r\n   */",
    "pos": [7062, 7503],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1444724061"
  },
  {
    "path": "src/internal/Notification.ts",
    "lineNumber": 208,
    "name": "Notification.createNext",
    "kind": "MethodDeclaration",
    "code": "static createNext<T>(value: T) {\r\n    return new Notification('N', value) as Notification<T> & NextNotification<T>;\r\n  }",
    "deprecationMessage": "/**\r\n   * A shortcut to create a Notification instance of the type `next` from a\r\n   * given value.\r\n   * @param {T} value The `next` value.\r\n   * @return {Notification<T>} The \"next\" Notification representing the\r\n   * argument.\r\n   * @nocollapse\r\n   * @deprecated remove in v8. It is NOT recommended to create instances of `Notification` directly\r\n   * and use them. Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\n   * For example: `{ kind: 'N', value: 1 }`, `{kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\n   */",
    "pos": [7923, 8500],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2513659633"
  },
  {
    "path": "src/internal/Notification.ts",
    "lineNumber": 223,
    "name": "Notification.createError",
    "kind": "MethodDeclaration",
    "code": "static createError(err?: any) {\r\n    return new Notification('E', undefined, err) as Notification<never> & ErrorNotification;\r\n  }",
    "deprecationMessage": "/**\r\n   * A shortcut to create a Notification instance of the type `error` from a\r\n   * given error.\r\n   * @param {any} [err] The `error` error.\r\n   * @return {Notification<T>} The \"error\" Notification representing the\r\n   * argument.\r\n   * @nocollapse\r\n   * @deprecated remove in v8. It is NOT recommended to create instances of `Notification` directly\r\n   * and use them. Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\n   * For example: `{ kind: 'N', value: 1 }`, `{kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\n   */",
    "pos": [8630, 9212],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2029282479"
  },
  {
    "path": "src/internal/Notification.ts",
    "lineNumber": 235,
    "name": "Notification.createComplete",
    "kind": "MethodDeclaration",
    "code": "static createComplete(): Notification<never> & CompleteNotification {\r\n    return Notification.completeNotification;\r\n  }",
    "deprecationMessage": "/**\r\n   * A shortcut to create a Notification instance of the type `complete`.\r\n   * @return {Notification<any>} The valueless \"complete\" Notification.\r\n   * @nocollapse\r\n   * @deprecated remove in v8. It is NOT recommended to create instances of `Notification` directly\r\n   * and use them. Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\r\n   * For example: `{ kind: 'N', value: 1 }`, `{kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\r\n   */",
    "pos": [9352, 9851],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1973351068"
  },
  {
    "path": "src/internal/ReplaySubject.ts",
    "lineNumber": 87,
    "name": "ReplaySubject._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): Subscription {\r\n    // When `_infiniteTimeWindow === true` then the buffer is already trimmed\r\n    const _infiniteTimeWindow = this._infiniteTimeWindow;\r\n    const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\r\n    const len = _events.length;\r\n    let subscription: Subscription;\r\n\r\n    if (this.closed) {\r\n      throw new ObjectUnsubscribedError();\r\n    } else if (this.isStopped || this.hasError) {\r\n      subscription = Subscription.EMPTY;\r\n    } else {\r\n      this.observers.push(subscriber);\r\n      subscription = new SubjectSubscription(this, subscriber);\r\n    }\r\n\r\n    if (_infiniteTimeWindow) {\r\n      for (let i = 0; i < len && !subscriber.closed; i++) {\r\n        subscriber.next(<T>_events[i]);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < len && !subscriber.closed; i++) {\r\n        subscriber.next((<ReplayEvent<T>>_events[i]).value);\r\n      }\r\n    }\r\n\r\n    if (this.hasError) {\r\n      subscriber.error(this.thrownError);\r\n    } else if (this.isStopped) {\r\n      subscriber.complete();\r\n    }\r\n\r\n    return subscription;\r\n  }",
    "deprecationMessage": "/** @deprecated Remove in v8. This is an internal implementation detail, do not use. */",
    "pos": [3691, 3778],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3064759287"
  },
  {
    "path": "src/internal/operators/concatMapTo.ts",
    "lineNumber": 7,
    "name": "concatMapTo",
    "kind": "FunctionDeclaration",
    "code": "export function concatMapTo<O extends ObservableInput<any>>(observable: O, resultSelector: undefined): OperatorFunction<any, ObservedValueOf<O>>;",
    "deprecationMessage": "/** @deprecated */",
    "pos": [282, 300],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1130087428"
  },
  {
    "path": "src/internal/operators/pluck.ts",
    "lineNumber": 46,
    "name": "pluck",
    "kind": "FunctionDeclaration",
    "code": "export function pluck<T, R>(...properties: Array<string | number | symbol>): OperatorFunction<T, R> {\r\n  const length = properties.length;\r\n  if (length === 0) {\r\n    throw new Error('list of properties cannot be empty.');\r\n  }\r\n  return map((x) => {\r\n    let currentProp: any = x;\r\n    for (let i = 0; i < length; i++) {\r\n      const p = currentProp?.[properties[i]];\r\n      if (typeof p !== 'undefined') {\r\n        currentProp = p;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n    return currentProp;\r\n  });\r\n}",
    "deprecationMessage": "/**\r\n * Maps each source value to its specified nested property.\r\n *\r\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\r\n * the nested properties of every emitted value.</span>\r\n *\r\n * ![](pluck.png)\r\n *\r\n * Given a list of strings or numbers describing a path to a property, retrieves\r\n * the value of a specified nested property from all values in the source\r\n * Observable. If a property can't be resolved, it will return `undefined` for\r\n * that value.\r\n *\r\n * ## Example\r\n * Map every click to the tagName of the clicked target element\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { pluck } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const tagNames = clicks.pipe(pluck('target', 'tagName'));\r\n * tagNames.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link map}\r\n *\r\n * @param properties The nested properties to pluck from each source\r\n * value.\r\n * @return A new Observable of property values from the source values.\r\n * @deprecated Remove in v8. Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`.\r\n */",
    "pos": [1659, 2793],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2317883628"
  },
  {
    "path": "src/internal/operators/subscribeOn.ts",
    "lineNumber": 37,
    "name": "SubscribeOnObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>) {\r\n    const delay = this.delayTime;\r\n    const source = this.source;\r\n    const scheduler = this.scheduler;\r\n\r\n    return scheduler.schedule<DispatchArg<any>>(SubscribeOnObservable.dispatch as any, delay, {\r\n      source,\r\n      subscriber,\r\n    });\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [1084, 1157],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1841049569"
  },
  {
    "path": "src/internal/operators/switchMapTo.ts",
    "lineNumber": 7,
    "name": "switchMapTo",
    "kind": "FunctionDeclaration",
    "code": "export function switchMapTo<R>(observable: ObservableInput<R>, resultSelector: undefined): OperatorFunction<any, R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported. Switch to using switchMap with an inner map */",
    "pos": [236, 337],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "405925346"
  },
  {
    "path": "src/internal/Operator.ts",
    "lineNumber": 7,
    "name": "Operator",
    "kind": "InterfaceDeclaration",
    "code": "export interface Operator<T, R> {\r\n  call(subscriber: Subscriber<R>, source: any): TeardownLogic;\r\n}",
    "deprecationMessage": "/***\r\n * @deprecated Internal implementation detail, do not use.\r\n */",
    "pos": [88, 157],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1341579169"
  },
  {
    "path": "src/internal/Scheduler.ts",
    "lineNumber": 25,
    "name": "Scheduler",
    "kind": "ClassDeclaration",
    "code": "export class Scheduler implements SchedulerLike {\r\n\r\n  public static now: () => number = dateTimestampProvider.now;\r\n\r\n  constructor(private SchedulerAction: typeof Action,\r\n              now: () => number = Scheduler.now) {\r\n    this.now = now;\r\n  }\r\n\r\n  /**\r\n   * A getter method that returns a number representing the current time\r\n   * (at the time this function was called) according to the scheduler's own\r\n   * internal clock.\r\n   * @return {number} A number that represents the current time. May or may not\r\n   * have a relation to wall-clock time. May or may not refer to a time unit\r\n   * (e.g. milliseconds).\r\n   */\r\n  public now: () => number;\r\n\r\n  /**\r\n   * Schedules a function, `work`, for execution. May happen at some point in\r\n   * the future, according to the `delay` parameter, if specified. May be passed\r\n   * some context object, `state`, which will be passed to the `work` function.\r\n   *\r\n   * The given arguments will be processed an stored as an Action object in a\r\n   * queue of actions.\r\n   *\r\n   * @param {function(state: ?T): ?Subscription} work A function representing a\r\n   * task, or some unit of work to be executed by the Scheduler.\r\n   * @param {number} [delay] Time to wait before executing the work, where the\r\n   * time unit is implicit and defined by the Scheduler itself.\r\n   * @param {T} [state] Some contextual data that the `work` function uses when\r\n   * called by the Scheduler.\r\n   * @return {Subscription} A subscription in order to be able to unsubscribe\r\n   * the scheduled work.\r\n   */\r\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\r\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\r\n  }\r\n}",
    "deprecationMessage": "/**\r\n * An execution context and a data structure to order tasks and schedule their\r\n * execution. Provides a notion of (potentially virtual) time, through the\r\n * `now()` getter method.\r\n *\r\n * Each unit of work in a Scheduler is called an `Action`.\r\n *\r\n * ```ts\r\n * class Scheduler {\r\n *   now(): number;\r\n *   schedule(work, delay?, state?): Subscription;\r\n * }\r\n * ```\r\n *\r\n * @class Scheduler\r\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\r\n * should not be used directly. Rather, create your own class and implement\r\n * {@link SchedulerLike}\r\n */",
    "pos": [231, 813],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "4040237916"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 43,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\r\n                                                    Array<ObservableInput<any>> |\r\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\r\n  let project: ((...values: Array<any>) => R) | undefined = undefined;\r\n  if (typeof observables[observables.length - 1] === 'function') {\r\n    project = <(...values: Array<any>) => R>observables.pop();\r\n  }\r\n\r\n  // if the first and only other argument besides the resultSelector is an array\r\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\r\n  if (observables.length === 1 && isArray(observables[0])) {\r\n    observables = (<any>observables[0]).slice();\r\n  }\r\n\r\n  return (source: Observable<T>) => stankyLift(\r\n    source,\r\n    from([source, ...observables]),\r\n    new CombineLatestOperator(project)\r\n  );\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated, use {@link combineLatestWith} or static {@link combineLatest}\r\n */",
    "pos": [3386, 3484],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3132761866"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 28,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | undefined>): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => stankyLift(\r\n    source,\r\n    concatStatic(source, ...(observables as any[])),\r\n  );\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated remove in v8. Use {@link concatWith}\r\n */",
    "pos": [2014, 2075],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1675296043"
  },
  {
    "path": "src/internal/operators/materialize.ts",
    "lineNumber": 62,
    "name": "materialize",
    "kind": "FunctionDeclaration",
    "code": "export function materialize<T>(): OperatorFunction<T, Notification<T> & ObservableNotification<T>> {\r\n  return function materializeOperatorFunction(source: Observable<T>) {\r\n    return lift(source, new MaterializeOperator<T>());\r\n  };\r\n}",
    "deprecationMessage": "/**\r\n * Represents all of the notifications from the source Observable as `next`\r\n * emissions marked with their original types within {@link Notification}\r\n * objects.\r\n *\r\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\r\n * {@link Notification} objects, emitted as `next` on the output Observable.\r\n * </span>\r\n *\r\n * ![](materialize.png)\r\n *\r\n * `materialize` returns an Observable that emits a `next` notification for each\r\n * `next`, `error`, or `complete` emission of the source Observable. When the\r\n * source Observable emits `complete`, the output Observable will emit `next` as\r\n * a Notification of type \"complete\", and then it will emit `complete` as well.\r\n * When the source Observable emits `error`, the output will emit `next` as a\r\n * Notification of type \"error\", and then `complete`.\r\n *\r\n * This operator is useful for producing metadata of the source Observable, to\r\n * be consumed as `next` emissions. Use it in conjunction with\r\n * {@link dematerialize}.\r\n *\r\n * ## Example\r\n *\r\n * Convert a faulty Observable to an Observable of Notifications\r\n *\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { materialize, map } from 'rxjs/operators';\r\n *\r\n * const letters = of('a', 'b', 13, 'd');\r\n * const upperCase = letters.pipe(map(x => x.toUpperCase()));\r\n * const materialized = upperCase.pipe(materialize());\r\n * materialized.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\r\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\r\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\r\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\r\n * //   [as project] (http://1…, hasValue: false}\r\n * ```\r\n *\r\n * @see {@link Notification}\r\n * @see {@link dematerialize}\r\n *\r\n * @return {Observable<Notification<T>>} An Observable that emits\r\n * {@link Notification} objects that wrap the original emissions from the source\r\n * Observable with metadata.\r\n *\r\n * @deprecated In version 8, materialize will start to emit {@link ObservableNotification} objects, and not\r\n * {@link Notification} instances. This means that methods that are not commonly used, like `Notification.observe`\r\n * will not be available on the emitted values at that time.\r\n */",
    "pos": [290, 2641],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2929963121"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 60,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number | undefined>): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => stankyLift(\r\n    source,\r\n    mergeStatic(source, ...(observables as any[]))\r\n  );\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated use {@link mergeWith} or static {@link merge}\r\n */",
    "pos": [4712, 4782],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3602974232"
  },
  {
    "path": "src/internal/operators/raceWith.ts",
    "lineNumber": 26,
    "name": "race",
    "kind": "FunctionDeclaration",
    "code": "export function race<T, R>(...observables: ObservableInput<R>[]): OperatorFunction<T, (T|R)[]> {\r\n  // if the only argument is an array, it was most likely called with\r\n  // `pair([obs1, obs2, ...])`\r\n  if (observables.length === 1 && isArray(observables[0])) {\r\n    observables = observables[0];\r\n  }\r\n\r\n  return raceWith(...observables) as any;\r\n}",
    "deprecationMessage": "/**\r\n * Returns an Observable that mirrors the first source Observable to emit a next,\r\n * error or complete notification from the combination of this Observable and supplied Observables.\r\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\r\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\r\n * @deprecated Deprecated use {@link raceWith}\r\n */",
    "pos": [1082, 1524],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "221387883"
  },
  {
    "path": "src/internal/operators/timeoutWith.ts",
    "lineNumber": 21,
    "name": "timeoutWith",
    "kind": "FunctionDeclaration",
    "code": "export function timeoutWith<T, R>(dueBy: Date, switchTo: ObservableInput<R>, scheduler?: SchedulerLike): OperatorFunction<T, T | R>;",
    "deprecationMessage": "/**\r\n * If the time of the Date object passed arrives before the first value arrives from the source, it will unsubscribe\r\n * from the source and switch the subscription to another observable.\r\n *\r\n * <span class=\"informal\">Use to switch to a different observable if the first value doesn't arrive by a specific time</span>\r\n *\r\n * Can be used to set a timeout only for the first value, however it's recommended to use the {@link timeout} operator with\r\n * the `first` configuration to get that effect.\r\n *\r\n * @param dueBy The exact time, as a `Date`, at which the timeout will be triggered if the first value does not arrive.\r\n * @param switchTo The observable to switch to when timeout occurs.\r\n * @param scheduler The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}\r\n * @deprecated This will be removed in v8. Use the configuration object with {@link timeout} instead: `timeoutWith(someDate, a$, scheduler)` -> `timeout({ first: someDate, with: () => a$, scheduler })`\r\n */",
    "pos": [228, 1260],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "627666335"
  },
  {
    "path": "src/internal/operators/timeoutWith.ts",
    "lineNumber": 82,
    "name": "timeoutWith",
    "kind": "FunctionDeclaration",
    "code": "export function timeoutWith<T, R>(waitFor: number, switchTo: ObservableInput<R>, scheduler?: SchedulerLike): OperatorFunction<T, T | R>;",
    "deprecationMessage": "/**\r\n * When the passed timespan ellapses before the source emits any given value, it will unsubscribe from the source,\r\n * and switch the subscription to another observable.\r\n *\r\n * <span class=\"informal\">Used to switch to a different observable if your source is being slow</span>\r\n *\r\n * Useful in cases where:\r\n *\r\n * - You want to switch to a different source that may be faster\r\n * - You want to notify a user that the data stream is slow\r\n * - You want to emit a custom error rather than the {@link TimeoutError} emitted\r\n *   by the default usage of {@link timeout}.\r\n *\r\n * ## Example\r\n *\r\n * Fallback to a faster observable\r\n *\r\n * ```ts\r\n * import { interval } from 'rxjs';\r\n * import { timeoutWith } from 'rxjs/operators';\r\n *\r\n * const slow$ = interval(1000);\r\n * const faster$ = interval(500);\r\n *\r\n * slow$.pipe(\r\n *    timeoutWith(900, faster$)\r\n * )\r\n * .subscribe(console.log)\r\n * ```\r\n *\r\n * ### Example\r\n *\r\n * Emit your own custom timeout error\r\n *\r\n * ```ts\r\n * import { interval, throwError } from 'rxjs';\r\n * import { timeoutWith } from 'rxjs/operators';\r\n *\r\n * class CustomTimeoutError extends Error {\r\n *   constructor() {\r\n *      super('It was too slow');\r\n *      this.name = 'CustomTimeoutError';\r\n *   }\r\n * }\r\n *\r\n * const slow = interval(1000);\r\n *\r\n * slow$.pipe(\r\n *    timeoutWith(900, throwError(new CustomTimeoutError()))\r\n * )\r\n * .subscribe({\r\n *    error: console.error\r\n * })\r\n * ```\r\n * @param waitFor The time allowed between values from the source before timeout is triggered.\r\n * @param switchTo The observable to switch to when timeout occurs.\r\n * @param scheduler The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}\r\n * @deprecated This will be removed in v8. Use the configuration object with {@link timeout} instead: `timeoutWith(100, a$, scheduler)` -> `timeout({ each: 100, with: () => a$, scheduler })`\r\n */",
    "pos": [1398, 3314],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1985156023"
  },
  {
    "path": "src/internal/observable/bindNodeCallback.ts",
    "lineNumber": 10,
    "name": "bindNodeCallback",
    "kind": "FunctionDeclaration",
    "code": "export function bindNodeCallback(\r\n  callbackFunc: Function,\r\n  resultSelector: Function,\r\n  scheduler?: SchedulerLike\r\n): (...args: any[]) => Observable<any>;",
    "deprecationMessage": "/** @deprecated resultSelector is deprecated, pipe to map instead */",
    "pos": [283, 351],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3800003790"
  },
  {
    "path": "src/internal/observable/throwError.ts",
    "lineNumber": 110,
    "name": "throwError",
    "kind": "FunctionDeclaration",
    "code": "export function throwError(error: any): Observable<never>;",
    "deprecationMessage": "/**\r\n * Returns an observable that will error with the specified error immediately upon subscription.\r\n *\r\n * @param error The error instance to emit\r\n * @deprecated Removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\r\n * because it will create the error at the moment it should be created and capture a more appropriate stack trace. If\r\n * for some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`.\r\n */",
    "pos": [3000, 3531],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3883416324"
  },
  {
    "path": "src/internal/observable/throwError.ts",
    "lineNumber": 120,
    "name": "throwError",
    "kind": "FunctionDeclaration",
    "code": "export function throwError(errorOrErrorFactory: any, scheduler: SchedulerLike): Observable<never>;",
    "deprecationMessage": "/**\r\n * Notifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\r\n *\r\n * @param errorOrErrorFactory An error instance or error factory\r\n * @param scheduler A scheduler to use to schedule the error notification\r\n * @deprecated Use `throwError` in combination with {@link observeOn}:\r\n * `throwError(() => new Error('test')).pipe(observeOn(scheduler));`\r\n */",
    "pos": [3595, 4001],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "1385019560"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 11,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(\r\n  v1: O1,\r\n  v2: O2,\r\n  resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R\r\n): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [454, 531],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2858095980"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 17,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(\r\n  v1: O1,\r\n  v2: O2,\r\n  v3: O3,\r\n  resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R\r\n): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [740, 817],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2881547434"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 24,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<\r\n  O1 extends ObservableInput<any>,\r\n  O2 extends ObservableInput<any>,\r\n  O3 extends ObservableInput<any>,\r\n  O4 extends ObservableInput<any>,\r\n  R\r\n>(\r\n  v1: O1,\r\n  v2: O2,\r\n  v3: O3,\r\n  v4: O4,\r\n  resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R\r\n): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [1095, 1172],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2098049099"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 38,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<\r\n  O1 extends ObservableInput<any>,\r\n  O2 extends ObservableInput<any>,\r\n  O3 extends ObservableInput<any>,\r\n  O4 extends ObservableInput<any>,\r\n  O5 extends ObservableInput<any>,\r\n  R\r\n>(\r\n  v1: O1,\r\n  v2: O2,\r\n  v3: O3,\r\n  v4: O4,\r\n  v5: O5,\r\n  resultSelector: (\r\n    v1: ObservedValueOf<O1>,\r\n    v2: ObservedValueOf<O2>,\r\n    v3: ObservedValueOf<O3>,\r\n    v4: ObservedValueOf<O4>,\r\n    v5: ObservedValueOf<O5>\r\n  ) => R\r\n): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [1537, 1614],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "3867555937"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 60,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<\r\n  O1 extends ObservableInput<any>,\r\n  O2 extends ObservableInput<any>,\r\n  O3 extends ObservableInput<any>,\r\n  O4 extends ObservableInput<any>,\r\n  O5 extends ObservableInput<any>,\r\n  O6 extends ObservableInput<any>,\r\n  R\r\n>(\r\n  v1: O1,\r\n  v2: O2,\r\n  v3: O3,\r\n  v4: O4,\r\n  v5: O5,\r\n  v6: O6,\r\n  resultSelector: (\r\n    v1: ObservedValueOf<O1>,\r\n    v2: ObservedValueOf<O2>,\r\n    v3: ObservedValueOf<O3>,\r\n    v4: ObservedValueOf<O4>,\r\n    v5: ObservedValueOf<O5>,\r\n    v6: ObservedValueOf<O6>\r\n  ) => R\r\n): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [2081, 2158],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2992730242"
  },
  {
    "path": "src/internal/operators/groupBy.ts",
    "lineNumber": 303,
    "name": "GroupedObservable.constructor",
    "kind": "Constructor",
    "code": "constructor(public key: K, private groupSubject: Subject<T>, private refCountSubscription?: RefCountSubscription) {\r\n    super();\r\n  }",
    "deprecationMessage": "/** @deprecated Do not construct this type. Internal use only */",
    "pos": [9502, 9566],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "12490816"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 41,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, R>(...sources: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => lift(source, function (this: Subscriber<any>, source: Observable<T>) {\r\n    const args = [source, ...sources];\r\n    return zipStatic(...args).subscribe(this);\r\n  })\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated. Use {@link zipWith}.\r\n */",
    "pos": [3190, 3247],
    "version": "7.0.0-beta.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-09-03T10:41:12-05:00",
    "ruid": "2149307947"
  },
  {
    "path": "src/internal/observable/bindNodeCallback.ts",
    "lineNumber": 12,
    "name": "bindNodeCallback",
    "kind": "FunctionDeclaration",
    "code": "export function bindNodeCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;",
    "deprecationMessage": "/** @deprecated resultSelector is deprecated, pipe to map instead */",
    "pos": [434, 502],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "2624564014"
  },
  {
    "path": "src/internal/operators/repeatWhen.ts",
    "lineNumber": 99,
    "name": "RepeatWhenSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    const { notifications, retriesSubscription } = this;\r\n    if (notifications) {\r\n      notifications.unsubscribe();\r\n      this.notifications = null;\r\n    }\r\n    if (retriesSubscription) {\r\n      retriesSubscription.unsubscribe();\r\n      this.retriesSubscription = null;\r\n    }\r\n    this.retries = null;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [3358, 3431],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "2141743312"
  },
  {
    "path": "src/internal/operators/retryWhen.ts",
    "lineNumber": 127,
    "name": "RetryWhenSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    const { errors, retriesSubscription } = this;\r\n    if (errors) {\r\n      errors.unsubscribe();\r\n      this.errors = null;\r\n    }\r\n    if (retriesSubscription) {\r\n      retriesSubscription.unsubscribe();\r\n      this.retriesSubscription = null;\r\n    }\r\n    this.retries = null;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [4002, 4075],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "1037021008"
  },
  {
    "path": "src/internal/operators/groupBy.ts",
    "lineNumber": 283,
    "name": "GroupedObservable.constructor",
    "kind": "Constructor",
    "code": "constructor(public key: K,\r\n              private groupSubject: Subject<T>,\r\n              private refCountSubscription?: RefCountSubscription) {\r\n    super();\r\n  }",
    "deprecationMessage": "/** @deprecated Do not construct this type. Internal use only */",
    "pos": [9639, 9703],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "1886828352"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 16,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, R>(v1: O1, v2: O2, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [809, 886],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "1349552844"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 18,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [1083, 1160],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "1813031328"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 20,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [1423, 1500],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "1387538507"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 22,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [1829, 1906],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "3840207905"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 24,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<O1 extends ObservableInput<any>, O2 extends ObservableInput<any>, O3 extends ObservableInput<any>, O4 extends ObservableInput<any>, O5 extends ObservableInput<any>, O6 extends ObservableInput<any>, R>(v1: O1, v2: O2, v3: O3, v4: O4, v5: O5, v6: O6, resultSelector: (v1: ObservedValueOf<O1>, v2: ObservedValueOf<O2>, v3: ObservedValueOf<O3>, v4: ObservedValueOf<O4>, v5: ObservedValueOf<O5>, v6: ObservedValueOf<O6>) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [2301, 2378],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "2395934728"
  },
  {
    "path": "src/internal/Subscriber.ts",
    "lineNumber": 149,
    "name": "Subscriber._unsubscribeAndRecycle",
    "kind": "MethodDeclaration",
    "code": "_unsubscribeAndRecycle(): Subscriber<T> {\r\n    const {  _parentOrParents } = this;\r\n    this._parentOrParents = null!;\r\n    this.unsubscribe();\r\n    this.closed = false;\r\n    this.isStopped = false;\r\n    this._parentOrParents = _parentOrParents;\r\n    return this;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [5027, 5100],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "2976988410"
  },
  {
    "path": "src/internal/operators/bufferTime.ts",
    "lineNumber": 188,
    "name": "BufferTimeSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    this.contexts = null!;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [6821, 6894],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "398675990"
  },
  {
    "path": "src/internal/operators/bufferWhen.ts",
    "lineNumber": 94,
    "name": "BufferWhenSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    this.buffer = null!;\r\n    this.subscribing = false;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [3010, 3083],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "876581678"
  },
  {
    "path": "src/internal/operators/groupBy.ts",
    "lineNumber": 264,
    "name": "GroupDurationSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    const { parent, key } = this;\r\n    this.key = this.parent = null!;\r\n    if (parent) {\r\n      parent.removeGroup(key);\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [9029, 9102],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "3282125426"
  },
  {
    "path": "src/internal/operators/repeatWhen.ts",
    "lineNumber": 113,
    "name": "RepeatWhenSubscriber._unsubscribeAndRecycle",
    "kind": "MethodDeclaration",
    "code": "_unsubscribeAndRecycle(): Subscriber<T> {\r\n    const { _unsubscribe } = this;\r\n\r\n    this._unsubscribe = null!;\r\n    super._unsubscribeAndRecycle();\r\n    this._unsubscribe = _unsubscribe;\r\n\r\n    return this;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [3770, 3843],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "1643139215"
  },
  {
    "path": "src/internal/operators/window.ts",
    "lineNumber": 113,
    "name": "WindowSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    this.window = null!;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [3546, 3619],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "1301733718"
  },
  {
    "path": "src/internal/operators/windowToggle.ts",
    "lineNumber": 141,
    "name": "WindowToggleSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    const { contexts } = this;\r\n    this.contexts = null!;\r\n    if (contexts) {\r\n      const len = contexts.length;\r\n      let index = -1;\r\n      while (++index < len) {\r\n        const context = contexts[index];\r\n        context.window.unsubscribe();\r\n        context.subscription.unsubscribe();\r\n      }\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [4564, 4637],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "1598566180"
  },
  {
    "path": "src/internal/scheduler/AsyncAction.ts",
    "lineNumber": 135,
    "name": "AsyncAction._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n\r\n    const id = this.id;\r\n    const scheduler = this.scheduler;\r\n    const actions = scheduler.actions;\r\n    const index = actions.indexOf(this);\r\n\r\n    this.work  = null!;\r\n    this.state = null!;\r\n    this.pending = false;\r\n    this.scheduler = null!;\r\n\r\n    if (index !== -1) {\r\n      actions.splice(index, 1);\r\n    }\r\n\r\n    if (id != null) {\r\n      this.id = this.recycleAsyncId(scheduler, id, null);\r\n    }\r\n\r\n    this.delay = null!;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [4620, 4693],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "1037174716"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 40,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\r\n  return function zipOperatorFunction(source: Observable<T>) {\r\n    return stankyLift(\r\n      source,\r\n      zipStatic<R>(source, ...observables)\r\n    );\r\n  };\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated. Use {@link zipWith}.\r\n */",
    "pos": [3152, 3209],
    "version": "7.0.0-beta.4",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-08-02T15:54:18-05:00",
    "ruid": "1216139497"
  },
  {
    "path": "src/internal/symbol/rxSubscriber.ts",
    "lineNumber": 10,
    "name": "$$rxSubscriber",
    "kind": "VariableStatement",
    "code": "export const $$rxSubscriber = rxSubscriber;",
    "deprecationMessage": "/**\r\n * @deprecated use rxSubscriber instead\r\n */",
    "pos": [221, 270],
    "version": "7.0.0-beta.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:46:33-05:00",
    "ruid": "2807596482"
  },
  {
    "path": "src/internal/Scheduler.ts",
    "lineNumber": 24,
    "name": "Scheduler",
    "kind": "ClassDeclaration",
    "code": "export class Scheduler implements SchedulerLike {\r\n\r\n  /**\r\n   * Note: the extra arrow function wrapper is to make testing by overriding\r\n   * Date.now easier.\r\n   * @nocollapse\r\n   */\r\n  public static now: () => number = () => Date.now();\r\n\r\n  constructor(private SchedulerAction: typeof Action,\r\n              now: () => number = Scheduler.now) {\r\n    this.now = now;\r\n  }\r\n\r\n  /**\r\n   * A getter method that returns a number representing the current time\r\n   * (at the time this function was called) according to the scheduler's own\r\n   * internal clock.\r\n   * @return {number} A number that represents the current time. May or may not\r\n   * have a relation to wall-clock time. May or may not refer to a time unit\r\n   * (e.g. milliseconds).\r\n   */\r\n  public now: () => number;\r\n\r\n  /**\r\n   * Schedules a function, `work`, for execution. May happen at some point in\r\n   * the future, according to the `delay` parameter, if specified. May be passed\r\n   * some context object, `state`, which will be passed to the `work` function.\r\n   *\r\n   * The given arguments will be processed an stored as an Action object in a\r\n   * queue of actions.\r\n   *\r\n   * @param {function(state: ?T): ?Subscription} work A function representing a\r\n   * task, or some unit of work to be executed by the Scheduler.\r\n   * @param {number} [delay] Time to wait before executing the work, where the\r\n   * time unit is implicit and defined by the Scheduler itself.\r\n   * @param {T} [state] Some contextual data that the `work` function uses when\r\n   * called by the Scheduler.\r\n   * @return {Subscription} A subscription in order to be able to unsubscribe\r\n   * the scheduled work.\r\n   */\r\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\r\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\r\n  }\r\n}",
    "deprecationMessage": "/**\r\n * An execution context and a data structure to order tasks and schedule their\r\n * execution. Provides a notion of (potentially virtual) time, through the\r\n * `now()` getter method.\r\n *\r\n * Each unit of work in a Scheduler is called an `Action`.\r\n *\r\n * ```ts\r\n * class Scheduler {\r\n *   now(): number;\r\n *   schedule(work, delay?, state?): Subscription;\r\n * }\r\n * ```\r\n *\r\n * @class Scheduler\r\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\r\n * should not be used directly. Rather, create your own class and implement\r\n * {@link SchedulerLike}\r\n */",
    "pos": [155, 737],
    "version": "7.0.0-beta.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:46:33-05:00",
    "ruid": "1491862981"
  },
  {
    "path": "src/internal/symbol/rxSubscriber.ts",
    "lineNumber": 2,
    "name": "rxSubscriber",
    "kind": "VariableStatement",
    "code": "export const rxSubscriber = (() =>\r\n  typeof Symbol === 'function'\r\n    ? Symbol('rxSubscriber')\r\n    : '@@rxSubscriber_' + Math.random())();",
    "deprecationMessage": "/** @deprecated do not use, this is no longer checked by RxJS internals */",
    "pos": [0, 74],
    "version": "7.0.0-beta.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:46:33-05:00",
    "ruid": "3305839104"
  },
  {
    "path": "src/internal/operators/combineLatestWith.ts",
    "lineNumber": 42,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\r\n                                                    Array<ObservableInput<any>> |\r\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\r\n  let project: ((...values: Array<any>) => R) | undefined = undefined;\r\n  if (typeof observables[observables.length - 1] === 'function') {\r\n    project = <(...values: Array<any>) => R>observables.pop();\r\n  }\r\n\r\n  // if the first and only other argument besides the resultSelector is an array\r\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\r\n  if (observables.length === 1 && isArray(observables[0])) {\r\n    observables = (<any>observables[0]).slice();\r\n  }\r\n\r\n  return (source: Observable<T>) => source.lift.call(\r\n    from([source, ...observables]),\r\n    new CombineLatestOperator(project)\r\n  ) as Observable<R>;\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated, use {@link combineLatestWith} or static {@link combineLatest}\r\n */",
    "pos": [3336, 3434],
    "version": "7.0.0-beta.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:46:33-05:00",
    "ruid": "1892185603"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 27,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | undefined>): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => source.lift.call(\r\n    concatStatic(source, ...(observables as any[])),\r\n    undefined\r\n  ) as Observable<R>;\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated remove in v8. Use {@link concatWith}\r\n */",
    "pos": [1970, 2031],
    "version": "7.0.0-beta.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:46:33-05:00",
    "ruid": "2760088882"
  },
  {
    "path": "src/internal/operators/mergeWith.ts",
    "lineNumber": 59,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number | undefined>): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => source.lift.call(\r\n    mergeStatic(source, ...(observables as any[])),\r\n    undefined\r\n  ) as Observable<R>;\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated use {@link mergeWith} or static {@link merge}\r\n */",
    "pos": [4668, 4738],
    "version": "7.0.0-beta.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:46:33-05:00",
    "ruid": "2768829645"
  },
  {
    "path": "src/internal/operators/raceWith.ts",
    "lineNumber": 24,
    "name": "race",
    "kind": "FunctionDeclaration",
    "code": "export function race<T>(...observables: (Observable<T> | Observable<T>[])[]): MonoTypeOperatorFunction<T> {\r\n  return function raceOperatorFunction(source: Observable<T>) {\r\n    // if the only argument is an array, it was most likely called with\r\n    // `pair([obs1, obs2, ...])`\r\n    if (observables.length === 1 && isArray(observables[0])) {\r\n      observables = observables[0] as Observable<T>[];\r\n    }\r\n\r\n    return source.lift.call(\r\n      raceStatic(source, ...(observables as Observable<T>[])),\r\n      undefined\r\n    ) as Observable<T>;\r\n  };\r\n}",
    "deprecationMessage": "/**\r\n * Returns an Observable that mirrors the first source Observable to emit a next,\r\n * error or complete notification from the combination of this Observable and supplied Observables.\r\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\r\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\r\n * @deprecated Deprecated use {@link raceWith}\r\n */",
    "pos": [964, 1406],
    "version": "7.0.0-beta.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:46:33-05:00",
    "ruid": "3865393946"
  },
  {
    "path": "src/internal/operators/timeoutWith.ts",
    "lineNumber": 138,
    "name": "TimeoutWithSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    this.action = null;\r\n    this.scheduler = null!;\r\n    this.withObservable = null!;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [6225, 6298],
    "version": "7.0.0-beta.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:46:33-05:00",
    "ruid": "2678889317"
  },
  {
    "path": "src/internal/operators/zipWith.ts",
    "lineNumber": 39,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\r\n  return function zipOperatorFunction(source: Observable<T>) {\r\n    return source.lift.call(\r\n      zipStatic<R>(source, ...observables),\r\n      undefined\r\n    ) as Observable<R>;\r\n  };\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated. Use {@link zipWith}.\r\n */",
    "pos": [3108, 3165],
    "version": "7.0.0-beta.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:46:33-05:00",
    "ruid": "1238615292"
  },
  {
    "path": "src/internal/operators/materialize.ts",
    "lineNumber": 61,
    "name": "materialize",
    "kind": "FunctionDeclaration",
    "code": "export function materialize<T>(): OperatorFunction<T, Notification<T> & ObservableNotification<T>> {\r\n  return function materializeOperatorFunction(source: Observable<T>) {\r\n    return source.lift(new MaterializeOperator<T>());\r\n  };\r\n}",
    "deprecationMessage": "/**\r\n * Represents all of the notifications from the source Observable as `next`\r\n * emissions marked with their original types within {@link Notification}\r\n * objects.\r\n *\r\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\r\n * {@link Notification} objects, emitted as `next` on the output Observable.\r\n * </span>\r\n *\r\n * ![](materialize.png)\r\n *\r\n * `materialize` returns an Observable that emits a `next` notification for each\r\n * `next`, `error`, or `complete` emission of the source Observable. When the\r\n * source Observable emits `complete`, the output Observable will emit `next` as\r\n * a Notification of type \"complete\", and then it will emit `complete` as well.\r\n * When the source Observable emits `error`, the output will emit `next` as a\r\n * Notification of type \"error\", and then `complete`.\r\n *\r\n * This operator is useful for producing metadata of the source Observable, to\r\n * be consumed as `next` emissions. Use it in conjunction with\r\n * {@link dematerialize}.\r\n *\r\n * ## Example\r\n *\r\n * Convert a faulty Observable to an Observable of Notifications\r\n *\r\n * ```ts\r\n * import { of } from 'rxjs';\r\n * import { materialize, map } from 'rxjs/operators';\r\n *\r\n * const letters = of('a', 'b', 13, 'd');\r\n * const upperCase = letters.pipe(map(x => x.toUpperCase()));\r\n * const materialized = upperCase.pipe(materialize());\r\n * materialized.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\r\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\r\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\r\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\r\n * //   [as project] (http://1…, hasValue: false}\r\n * ```\r\n *\r\n * @see {@link Notification}\r\n * @see {@link dematerialize}\r\n *\r\n * @return {Observable<Notification<T>>} An Observable that emits\r\n * {@link Notification} objects that wrap the original emissions from the source\r\n * Observable with metadata.\r\n *\r\n * @deprecated In version 8, materialize will start to emit {@link ObservableNotification} objects, and not\r\n * {@link Notification} instances. This means that methods that are not commonly used, like `Notification.observe`\r\n * will not be available on the emitted values at that time.\r\n */",
    "pos": [252, 2603],
    "version": "7.0.0-beta.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:46:33-05:00",
    "ruid": "4159968627"
  },
  {
    "path": "src/internal/operators/switchMapTo.ts",
    "lineNumber": 7,
    "name": "switchMapTo",
    "kind": "FunctionDeclaration",
    "code": "export function switchMapTo<T, R>(observable: ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported. Switch to using switchMap with an inner map */",
    "pos": [236, 337],
    "version": "7.0.0-beta.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-04-02T20:22:55-05:00",
    "ruid": "3167622200"
  },
  {
    "path": "src/internal/ReplaySubject.ts",
    "lineNumber": 58,
    "name": "ReplaySubject._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): Subscription {\r\n    // When `_infiniteTimeWindow === true` then the buffer is already trimmed\r\n    const _infiniteTimeWindow = this._infiniteTimeWindow;\r\n    const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\r\n    const scheduler = this.scheduler;\r\n    const len = _events.length;\r\n    let subscription: Subscription;\r\n\r\n    if (this.closed) {\r\n      throw new ObjectUnsubscribedError();\r\n    } else if (this.isStopped || this.hasError) {\r\n      subscription = Subscription.EMPTY;\r\n    } else {\r\n      this.observers.push(subscriber);\r\n      subscription = new SubjectSubscription(this, subscriber);\r\n    }\r\n\r\n    if (scheduler) {\r\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\r\n    }\r\n\r\n    if (_infiniteTimeWindow) {\r\n      for (let i = 0; i < len && !subscriber.closed; i++) {\r\n        subscriber.next(<T>_events[i]);\r\n      }\r\n    } else {\r\n      for (let i = 0; i < len && !subscriber.closed; i++) {\r\n        subscriber.next((<ReplayEvent<T>>_events[i]).value);\r\n      }\r\n    }\r\n\r\n    if (this.hasError) {\r\n      subscriber.error(this.thrownError);\r\n    } else if (this.isStopped) {\r\n      subscriber.complete();\r\n    }\r\n\r\n    return subscription;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [1984, 2057],
    "version": "7.0.0-beta.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-04-02T20:22:55-05:00",
    "ruid": "4003246602"
  },
  {
    "path": "src/internal/operators/concatMapTo.ts",
    "lineNumber": 7,
    "name": "concatMapTo",
    "kind": "FunctionDeclaration",
    "code": "export function concatMapTo<T, O extends ObservableInput<any>>(observable: O, resultSelector: undefined): OperatorFunction<T, ObservedValueOf<O>>;",
    "deprecationMessage": "/** @deprecated */",
    "pos": [283, 301],
    "version": "7.0.0-beta.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-04-02T20:22:55-05:00",
    "ruid": "180391902"
  },
  {
    "path": "src/internal/observable/SubscribeOnObservable.ts",
    "lineNumber": 43,
    "name": "SubscribeOnObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>) {\r\n    const delay = this.delayTime;\r\n    const source = this.source;\r\n    const scheduler = this.scheduler;\r\n\r\n    return scheduler.schedule<DispatchArg<any>>(SubscribeOnObservable.dispatch as any, delay, {\r\n      source, subscriber\r\n    });\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [1325, 1398],
    "version": "7.0.0-beta.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-04-02T20:22:55-05:00",
    "ruid": "325005063"
  },
  {
    "path": "src/internal/operators/pluck.ts",
    "lineNumber": 47,
    "name": "pluck",
    "kind": "FunctionDeclaration",
    "code": "export function pluck<T, R>(...properties: Array<string | number | symbol>): OperatorFunction<T, R> {\r\n  const length = properties.length;\r\n  if (length === 0) {\r\n    throw new Error('list of properties cannot be empty.');\r\n  }\r\n  return map((x) => {\r\n    let currentProp: any = x;\r\n    for (let i = 0; i < length; i++) {\r\n      const p = currentProp[properties[i]];\r\n      if (typeof p !== 'undefined') {\r\n        currentProp = p;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n    return currentProp;\r\n  });\r\n}",
    "deprecationMessage": "/**\r\n * Maps each source value to its specified nested property.\r\n *\r\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\r\n * the nested properties of every emitted value.</span>\r\n *\r\n * ![](pluck.png)\r\n *\r\n * Given a list of strings or numbers describing a path to a property, retrieves\r\n * the value of a specified nested property from all values in the source\r\n * Observable. If a property can't be resolved, it will return `undefined` for\r\n * that value.\r\n *\r\n * ## Example\r\n * Map every click to the tagName of the clicked target element\r\n * ```ts\r\n * import { fromEvent } from 'rxjs';\r\n * import { pluck } from 'rxjs/operators';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const tagNames = clicks.pipe(pluck('target', 'tagName'));\r\n * tagNames.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link map}\r\n *\r\n * @param properties The nested properties to pluck from each source\r\n * value.\r\n * @return A new Observable of property values from the source values.\r\n * @deprecated Remove in v8. Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`.\r\n */",
    "pos": [1704, 2838],
    "version": "7.0.0-beta.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-04-02T20:22:55-05:00",
    "ruid": "1645790525"
  },
  {
    "path": "src/internal/Subject.ts",
    "lineNumber": 180,
    "name": "AnonymousSubject._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): Subscription {\r\n    const { source } = this;\r\n    if (source) {\r\n      return this.source.subscribe(subscriber);\r\n    } else {\r\n      return Subscription.EMPTY;\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [4822, 4895],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "2881141288"
  },
  {
    "path": "src/internal/scheduler/AsyncAction.ts",
    "lineNumber": 134,
    "name": "AsyncAction._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n\r\n    const id = this.id;\r\n    const scheduler = this.scheduler;\r\n    const actions = scheduler.actions;\r\n    const index = actions.indexOf(this);\r\n\r\n    this.work  = null;\r\n    this.state = null;\r\n    this.pending = false;\r\n    this.scheduler = null;\r\n\r\n    if (index !== -1) {\r\n      actions.splice(index, 1);\r\n    }\r\n\r\n    if (id != null) {\r\n      this.id = this.recycleAsyncId(scheduler, id, null);\r\n    }\r\n\r\n    this.delay = null;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [4535, 4608],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "1144022972"
  },
  {
    "path": "src/internal/operators/combineLatest.ts",
    "lineNumber": 44,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, R>(...observables: Array<ObservableInput<any> |\r\n                                                    Array<ObservableInput<any>> |\r\n                                                    ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\r\n  let project: (...values: Array<any>) => R = null;\r\n  if (typeof observables[observables.length - 1] === 'function') {\r\n    project = <(...values: Array<any>) => R>observables.pop();\r\n  }\r\n\r\n  // if the first and only other argument besides the resultSelector is an array\r\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\r\n  if (observables.length === 1 && isArray(observables[0])) {\r\n    observables = (<any>observables[0]).slice();\r\n  }\r\n\r\n  return (source: Observable<T>) => source.lift.call(from([source, ...observables]), new CombineLatestOperator(project));\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated in favor of static {@link combineLatest}.\r\n */",
    "pos": [3531, 3608],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "3452656440"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 39,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => source.lift.call(mergeStatic(source, ...observables));\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated in favor of static {@link merge}.\r\n */",
    "pos": [3427, 3496],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "3137433475"
  },
  {
    "path": "src/internal/operators/zip.ts",
    "lineNumber": 39,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, R> {\r\n  return function zipOperatorFunction(source: Observable<T>) {\r\n    return source.lift.call(zipStatic<R>(source, ...observables));\r\n  };\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated in favor of static {@link zip}.\r\n */",
    "pos": [3129, 3196],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "240476151"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 7,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [250, 305],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "3323111212"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 9,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T>(concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [390, 445],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "25137773"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 11,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [551, 606],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "2130209450"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 13,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [720, 775],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "1168150155"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 15,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [910, 965],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "3016845551"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 17,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [1113, 1168],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "3547543278"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 19,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [1337, 1392],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "3084991338"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 21,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [1574, 1629],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "811745835"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 23,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [1832, 1887],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "893050287"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 25,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [2103, 2158],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "3824106382"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 27,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [2395, 2450],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "2766016810"
  },
  {
    "path": "src/internal/operators/merge.ts",
    "lineNumber": 29,
    "name": "merge",
    "kind": "FunctionDeclaration",
    "code": "export function merge<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static merge. */",
    "pos": [2700, 2755],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "2593001099"
  },
  {
    "path": "src/internal/observable/SubscribeOnObservable.ts",
    "lineNumber": 43,
    "name": "SubscribeOnObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>) {\r\n    const delay = this.delayTime;\r\n    const source = this.source;\r\n    const scheduler = this.scheduler;\r\n\r\n    return scheduler.schedule<DispatchArg<any>>(SubscribeOnObservable.dispatch, delay, {\r\n      source, subscriber\r\n    });\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [1325, 1398],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "2335556867"
  },
  {
    "path": "src/internal/operators/bufferTime.ts",
    "lineNumber": 188,
    "name": "BufferTimeSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    this.contexts = null;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [6754, 6827],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "3507005143"
  },
  {
    "path": "src/internal/operators/bufferWhen.ts",
    "lineNumber": 96,
    "name": "BufferWhenSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    this.buffer = null;\r\n    this.subscribing = false;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [3039, 3112],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "2378137007"
  },
  {
    "path": "src/internal/operators/groupBy.ts",
    "lineNumber": 261,
    "name": "GroupDurationSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    const { parent, key } = this;\r\n    this.key = this.parent = null;\r\n    if (parent) {\r\n      parent.removeGroup(key);\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [8677, 8750],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "2045238867"
  },
  {
    "path": "src/internal/operators/repeatWhen.ts",
    "lineNumber": 118,
    "name": "RepeatWhenSubscriber._unsubscribeAndRecycle",
    "kind": "MethodDeclaration",
    "code": "_unsubscribeAndRecycle(): Subscriber<T> {\r\n    const { _unsubscribe } = this;\r\n\r\n    this._unsubscribe = null;\r\n    super._unsubscribeAndRecycle();\r\n    this._unsubscribe = _unsubscribe;\r\n\r\n    return this;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [3927, 4000],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "3175574062"
  },
  {
    "path": "src/internal/operators/timeoutWith.ts",
    "lineNumber": 139,
    "name": "TimeoutWithSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    this.action = null;\r\n    this.scheduler = null;\r\n    this.withObservable = null;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [6251, 6324],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "2312055749"
  },
  {
    "path": "src/internal/operators/window.ts",
    "lineNumber": 117,
    "name": "WindowSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    this.window = null;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [3777, 3850],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "2572227863"
  },
  {
    "path": "src/internal/operators/windowToggle.ts",
    "lineNumber": 143,
    "name": "WindowToggleSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    const { contexts } = this;\r\n    this.contexts = null;\r\n    if (contexts) {\r\n      const len = contexts.length;\r\n      let index = -1;\r\n      while (++index < len) {\r\n        const context = contexts[index];\r\n        context.window.unsubscribe();\r\n        context.subscription.unsubscribe();\r\n      }\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [4580, 4653],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "2866122437"
  },
  {
    "path": "src/internal/observable/fromEvent.ts",
    "lineNumber": 52,
    "name": "fromEvent",
    "kind": "FunctionDeclaration",
    "code": "export function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [1990, 2064],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "223784397"
  },
  {
    "path": "src/internal/operators/race.ts",
    "lineNumber": 26,
    "name": "race",
    "kind": "FunctionDeclaration",
    "code": "export function race<T>(...observables: (Observable<T> | Observable<T>[])[]): MonoTypeOperatorFunction<T> {\r\n  return function raceOperatorFunction(source: Observable<T>) {\r\n    // if the only argument is an array, it was most likely called with\r\n    // `pair([obs1, obs2, ...])`\r\n    if (observables.length === 1 && isArray(observables[0])) {\r\n      observables = observables[0] as Observable<T>[];\r\n    }\r\n\r\n    return source.lift.call(raceStatic(source, ...(observables as Observable<T>[])));\r\n  };\r\n}",
    "deprecationMessage": "/**\r\n * Returns an Observable that mirrors the first source Observable to emit a next,\r\n * error or complete notification from the combination of this Observable and supplied Observables.\r\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\r\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\r\n * @method race\r\n * @owner Observable\r\n * @deprecated Deprecated in favor of static {@link race}.\r\n */",
    "pos": [934, 1427],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "918827383"
  },
  {
    "path": "src/internal/Subscriber.ts",
    "lineNumber": 153,
    "name": "Subscriber._unsubscribeAndRecycle",
    "kind": "MethodDeclaration",
    "code": "_unsubscribeAndRecycle(): Subscriber<T> {\r\n    const {  _parentOrParents } = this;\r\n    this._parentOrParents = null;\r\n    this.unsubscribe();\r\n    this.closed = false;\r\n    this.isStopped = false;\r\n    this._parentOrParents = _parentOrParents;\r\n    return this;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [5141, 5214],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "3055771483"
  },
  {
    "path": "src/internal/operators/endWith.ts",
    "lineNumber": 30,
    "name": "endWith",
    "kind": "FunctionDeclaration",
    "code": "export function endWith<T, Z = T>(...array: Array<Z | SchedulerLike>): OperatorFunction<T, T | Z>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([source, [a, b, c]], scheduler).pipe(concatAll())`) */",
    "pos": [2736, 2867],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "1343944705"
  },
  {
    "path": "src/internal/operators/startWith.ts",
    "lineNumber": 30,
    "name": "startWith",
    "kind": "FunctionDeclaration",
    "code": "export function startWith<T, D = T>(...array: Array<D | SchedulerLike>): OperatorFunction<T, T | D>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} and {@link concatAll} (e.g. `scheduled([[a, b, c], source], scheduler).pipe(concatAll())`) */",
    "pos": [2778, 2909],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "2288608592"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 27,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => source.lift.call(concatStatic(source, ...(observables as any[])));\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated remove in v8. Use {@link concatWith}\r\n */",
    "pos": [1970, 2031],
    "version": "7.0.0-alpha.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-12-27T10:19:21-06:00",
    "ruid": "175710719"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 38,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T>(value: T): Observable<T>;",
    "deprecationMessage": "/** @deprecated remove in v8. Do not use generic arguments directly, allow inference or cast with `as` */",
    "pos": [2864, 2969],
    "version": "7.0.0-alpha.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-09-18T08:59:22-05:00",
    "ruid": "3592173530"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 27,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => source.lift.call(concatStatic(source, ...observables));\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated in favor of static {@link concat}.\r\n */",
    "pos": [1978, 2048],
    "version": "6.6.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:59:58-05:00",
    "ruid": "4070384636"
  },
  {
    "path": "src/internal/observable/concat.ts",
    "lineNumber": 30,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<O extends ObservableInput<any>>(...observables: (O | SchedulerLike)[]): Observable<ObservedValueOf<O>>;",
    "deprecationMessage": "/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */",
    "pos": [4429, 4553],
    "version": "6.6.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:59:58-05:00",
    "ruid": "2788821348"
  },
  {
    "path": "src/internal/observable/concat.ts",
    "lineNumber": 33,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<R>(...observables: (ObservableInput<any> | SchedulerLike)[]): Observable<R>;",
    "deprecationMessage": "/** @deprecated Use {@link scheduled} and {@link concatAll} (e.g. `scheduled([o1, o2, o3], scheduler).pipe(concatAll())`) */",
    "pos": [4766, 4890],
    "version": "6.6.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2020-07-01T20:59:58-05:00",
    "ruid": "3680930688"
  },
  {
    "path": "src/internal/symbol/rxSubscriber.ts",
    "lineNumber": 2,
    "name": "rxSubscriber",
    "kind": "VariableStatement",
    "code": "export const rxSubscriber =\r\n  typeof Symbol === 'function'\r\n    ? Symbol('rxSubscriber')\r\n    : '@@rxSubscriber_' + Math.random();",
    "deprecationMessage": "/** @deprecated do not use, this is no longer checked by RxJS internals */",
    "pos": [0, 74],
    "version": "6.5.2",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-05-09T17:25:39-07:00",
    "ruid": "2284685538"
  },
  {
    "path": "src/internal/observable/of.ts",
    "lineNumber": 30,
    "name": "of",
    "kind": "FunctionDeclaration",
    "code": "export function of<T>(...args: (T | SchedulerLike)[]): Observable<T>;",
    "deprecationMessage": "/** @deprecated use {@link scheduled} instead `scheduled([a, b, c], scheduler)` */",
    "pos": [2263, 2345],
    "version": "6.5.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-04-22T19:42:18-07:00",
    "ruid": "2765246815"
  },
  {
    "path": "src/internal/Subscriber.ts",
    "lineNumber": 153,
    "name": "Subscriber._unsubscribeAndRecycle",
    "kind": "MethodDeclaration",
    "code": "_unsubscribeAndRecycle(): Subscriber<T> {\r\n    const { _parent, _parents } = this;\r\n    this._parent = null;\r\n    this._parents = null;\r\n    this.unsubscribe();\r\n    this.closed = false;\r\n    this.isStopped = false;\r\n    this._parent = _parent;\r\n    this._parents = _parents;\r\n    return this;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [5141, 5214],
    "version": "6.4.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2019-01-29T19:44:18-08:00",
    "ruid": "75243116"
  },
  {
    "path": "src/internal/operators/concat.ts",
    "lineNumber": 27,
    "name": "concat",
    "kind": "FunctionDeclaration",
    "code": "export function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => source.lift.call(concatStatic<T, R>(source, ...observables));\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated in favor of static {@link concat}.\r\n */",
    "pos": [1978, 2048],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "1473729236"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 16,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [565, 639],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "1791553293"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 18,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [775, 849],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "2310362790"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 20,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [1022, 1096],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "1391321196"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 22,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [1306, 1380],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "4035356865"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 24,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [1627, 1701],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "3362035789"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 26,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [1985, 2059],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "3204734434"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 37,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [3610, 3684],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "2566275679"
  },
  {
    "path": "src/internal/observable/combineLatest.ts",
    "lineNumber": 39,
    "name": "combineLatest",
    "kind": "FunctionDeclaration",
    "code": "export function combineLatest<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R, scheduler?: SchedulerLike): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [3839, 3913],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "3550301543"
  },
  {
    "path": "src/internal/observable/fromEventPattern.ts",
    "lineNumber": 10,
    "name": "fromEventPattern",
    "kind": "FunctionDeclaration",
    "code": "export function fromEventPattern<T>(addHandler: (handler: Function) => any, removeHandler?: (handler: Function, signal?: any) => void, resultSelector?: (...args: any[]) => T): Observable<T>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [414, 488],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "3627840883"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 15,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [621, 698],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "2235059510"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 17,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [797, 874],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "1256875229"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 19,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [1010, 1087],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "382517463"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 21,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [1260, 1337],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "864664378"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 23,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [1547, 1624],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "3087356022"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 25,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [1871, 1948],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "4007638297"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 36,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [3203, 3280],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "2082116516"
  },
  {
    "path": "src/internal/observable/zip.ts",
    "lineNumber": 38,
    "name": "zip",
    "kind": "FunctionDeclaration",
    "code": "export function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R): Observable<R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, pipe to map instead */",
    "pos": [3398, 3475],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "2338946396"
  },
  {
    "path": "src/internal/operators/concatMap.ts",
    "lineNumber": 7,
    "name": "concatMap",
    "kind": "FunctionDeclaration",
    "code": "export function concatMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, use inner map instead */",
    "pos": [260, 336],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "1877648425"
  },
  {
    "path": "src/internal/operators/concatMap.ts",
    "lineNumber": 9,
    "name": "concatMap",
    "kind": "FunctionDeclaration",
    "code": "export function concatMap<T, I, R>(project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, use inner map instead */",
    "pos": [481, 557],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "2177001580"
  },
  {
    "path": "src/internal/operators/concatMapTo.ts",
    "lineNumber": 7,
    "name": "concatMapTo",
    "kind": "FunctionDeclaration",
    "code": "export function concatMapTo<T>(observable: ObservableInput<T>, resultSelector: undefined): OperatorFunction<any, T>;",
    "deprecationMessage": "/** @deprecated */",
    "pos": [236, 254],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "4234708930"
  },
  {
    "path": "src/internal/operators/concatMapTo.ts",
    "lineNumber": 9,
    "name": "concatMapTo",
    "kind": "FunctionDeclaration",
    "code": "export function concatMapTo<T, I, R>(observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated */",
    "pos": [374, 392],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "4163141531"
  },
  {
    "path": "src/internal/operators/exhaustMap.ts",
    "lineNumber": 15,
    "name": "exhaustMap",
    "kind": "FunctionDeclaration",
    "code": "export function exhaustMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported. Use inner map instead. */",
    "pos": [648, 728],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "1997951995"
  },
  {
    "path": "src/internal/operators/mergeMap.ts",
    "lineNumber": 15,
    "name": "mergeMap",
    "kind": "FunctionDeclaration",
    "code": "export function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, use inner map instead */",
    "pos": [667, 743],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "3465030564"
  },
  {
    "path": "src/internal/operators/mergeMap.ts",
    "lineNumber": 17,
    "name": "mergeMap",
    "kind": "FunctionDeclaration",
    "code": "export function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, use inner map instead */",
    "pos": [908, 984],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "1433367009"
  },
  {
    "path": "src/internal/operators/mergeMapTo.ts",
    "lineNumber": 9,
    "name": "mergeMapTo",
    "kind": "FunctionDeclaration",
    "code": "export function mergeMapTo<T, I, R>(innerObservable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated */",
    "pos": [344, 362],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "881490088"
  },
  {
    "path": "src/internal/operators/switchMap.ts",
    "lineNumber": 15,
    "name": "switchMap",
    "kind": "FunctionDeclaration",
    "code": "export function switchMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, use inner map instead */",
    "pos": [647, 726],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "1160716047"
  },
  {
    "path": "src/internal/operators/switchMap.ts",
    "lineNumber": 17,
    "name": "switchMap",
    "kind": "FunctionDeclaration",
    "code": "export function switchMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector is no longer supported, use inner map instead */",
    "pos": [871, 950],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "2630198282"
  },
  {
    "path": "src/internal/operators/race.ts",
    "lineNumber": 26,
    "name": "race",
    "kind": "FunctionDeclaration",
    "code": "export function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): MonoTypeOperatorFunction<T> {\r\n  return function raceOperatorFunction(source: Observable<T>) {\r\n    // if the only argument is an array, it was most likely called with\r\n    // `pair([obs1, obs2, ...])`\r\n    if (observables.length === 1 && isArray(observables[0])) {\r\n      observables = <Array<Observable<T>>>observables[0];\r\n    }\r\n\r\n    return source.lift.call(raceStatic<T>(source, ...observables));\r\n  };\r\n}",
    "deprecationMessage": "/**\r\n * Returns an Observable that mirrors the first source Observable to emit an item\r\n * from the combination of this Observable and supplied Observables.\r\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\r\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\r\n * @method race\r\n * @owner Observable\r\n * @deprecated Deprecated in favor of static {@link race}.\r\n */",
    "pos": [934, 1396],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "2145333659"
  },
  {
    "path": "src/internal/Subscriber.ts",
    "lineNumber": 155,
    "name": "Subscriber._unsubscribeAndRecycle",
    "kind": "MethodDeclaration",
    "code": "_unsubscribeAndRecycle(): Subscriber<T> {\r\n    const { _parent, _parents } = this;\r\n    this._parent = null;\r\n    this._parents = null;\r\n    this.unsubscribe();\r\n    this.closed = false;\r\n    this.isStopped = false;\r\n    this._parent = _parent;\r\n    this._parents = _parents;\r\n    this._parentSubscription = null;\r\n    return this;\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [5203, 5276],
    "version": "6.3.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-25T17:01:07-07:00",
    "ruid": "1620033043"
  },
  {
    "path": "src/internal/Subscriber.ts",
    "lineNumber": 167,
    "name": "Subscriber._unsubscribeParentSubscription",
    "kind": "MethodDeclaration",
    "code": "_unsubscribeParentSubscription() {\r\n    if (this._parentSubscription !== null) {\r\n      this._parentSubscription.unsubscribe();\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [5809, 5882],
    "version": "6.3.2",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-04T09:19:17-07:00",
    "ruid": "3983997284"
  },
  {
    "path": "src/internal/Subscriber.ts",
    "lineNumber": 160,
    "name": "Subscriber._addParentTeardownLogic",
    "kind": "MethodDeclaration",
    "code": "_addParentTeardownLogic(parentTeardownLogic: TeardownLogic) {\r\n    if (parentTeardownLogic !== this) {\r\n      this._parentSubscription = this.add(parentTeardownLogic);\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [5547, 5620],
    "version": "6.3.2",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-09-04T09:19:17-07:00",
    "ruid": "2135303633"
  },
  {
    "path": "src/internal/Subscriber.ts",
    "lineNumber": 160,
    "name": "Subscriber._addParentTeardownLogic",
    "kind": "MethodDeclaration",
    "code": "_addParentTeardownLogic(parentTeardownLogic: TeardownLogic) {\r\n    this._parentSubscription = this.add(parentTeardownLogic);\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [5547, 5620],
    "version": "6.3.0",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-08-30T07:50:27-07:00",
    "ruid": "341001276"
  },
  {
    "path": "src/internal/Subscriber.ts",
    "lineNumber": 301,
    "name": "SafeSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe(): void {\r\n    const { _parentSubscriber } = this;\r\n    this._context = null;\r\n    this._parentSubscriber = null;\r\n    _parentSubscriber.unsubscribe();\r\n  }",
    "deprecationMessage": "/** @deprecated This is an internal implementation detail, do not use. */",
    "pos": [9743, 9816],
    "version": "6.2.2",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-07-13T15:18:55-07:00",
    "ruid": "1119790615"
  },
  {
    "path": "src/internal/operators/delayWhen.ts",
    "lineNumber": 12,
    "name": "delayWhen",
    "kind": "FunctionDeclaration",
    "code": "export function delayWhen<T>(delayDurationSelector: (value: T) => Observable<never>, subscriptionDelay?: Observable<any>): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated In future versions, empty notifiers will no longer re-emit the source value on the output observable. */",
    "pos": [463, 583],
    "version": "6.2.2",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-07-13T15:18:55-07:00",
    "ruid": "608711355"
  },
  {
    "path": "src/internal/Scheduler.ts",
    "lineNumber": 24,
    "name": "Scheduler",
    "kind": "ClassDeclaration",
    "code": "export class Scheduler implements SchedulerLike {\r\n\r\n  /** @nocollapse */\r\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\r\n\r\n  constructor(private SchedulerAction: typeof Action,\r\n              now: () => number = Scheduler.now) {\r\n    this.now = now;\r\n  }\r\n\r\n  /**\r\n   * A getter method that returns a number representing the current time\r\n   * (at the time this function was called) according to the scheduler's own\r\n   * internal clock.\r\n   * @return {number} A number that represents the current time. May or may not\r\n   * have a relation to wall-clock time. May or may not refer to a time unit\r\n   * (e.g. milliseconds).\r\n   */\r\n  public now: () => number;\r\n\r\n  /**\r\n   * Schedules a function, `work`, for execution. May happen at some point in\r\n   * the future, according to the `delay` parameter, if specified. May be passed\r\n   * some context object, `state`, which will be passed to the `work` function.\r\n   *\r\n   * The given arguments will be processed an stored as an Action object in a\r\n   * queue of actions.\r\n   *\r\n   * @param {function(state: ?T): ?Subscription} work A function representing a\r\n   * task, or some unit of work to be executed by the Scheduler.\r\n   * @param {number} [delay] Time to wait before executing the work, where the\r\n   * time unit is implicit and defined by the Scheduler itself.\r\n   * @param {T} [state] Some contextual data that the `work` function uses when\r\n   * called by the Scheduler.\r\n   * @return {Subscription} A subscription in order to be able to unsubscribe\r\n   * the scheduled work.\r\n   */\r\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\r\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\r\n  }\r\n}",
    "deprecationMessage": "/**\r\n * An execution context and a data structure to order tasks and schedule their\r\n * execution. Provides a notion of (potentially virtual) time, through the\r\n * `now()` getter method.\r\n *\r\n * Each unit of work in a Scheduler is called an {@link Action}.\r\n *\r\n * ```ts\r\n * class Scheduler {\r\n *   now(): number;\r\n *   schedule(work, delay?, state?): Subscription;\r\n * }\r\n * ```\r\n *\r\n * @class Scheduler\r\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\r\n * should not be used directly. Rather, create your own class and implement\r\n * {@link SchedulerLike}\r\n */",
    "pos": [155, 743],
    "version": "6.2.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-06-12T10:05:31-07:00",
    "ruid": "3505621104"
  },
  {
    "path": "src/internal/observable/fromEvent.ts",
    "lineNumber": 32,
    "name": "fromEvent",
    "kind": "FunctionDeclaration",
    "code": "export function fromEvent<T>(target: EventTargetLike, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [1083, 1157],
    "version": "6.0.0-ucandoit-rc.6",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-13T10:39:57-07:00",
    "ruid": "3899803942"
  },
  {
    "path": "src/internal/observable/fromEvent.ts",
    "lineNumber": 35,
    "name": "fromEvent",
    "kind": "FunctionDeclaration",
    "code": "export function fromEvent<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, pipe to map instead */",
    "pos": [1409, 1483],
    "version": "6.0.0-ucandoit-rc.6",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-13T10:39:57-07:00",
    "ruid": "4055985890"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 7,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T>(scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [253, 309],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "527006673"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 9,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T>(concurrent?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [395, 451],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "3498319856"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 11,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, T2>(v2: ObservableInput<T2>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [558, 614],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "828362263"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 13,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, T2>(v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [729, 785],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "693566870"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 15,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [921, 977],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "4058293938"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 17,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, T2, T3>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [1126, 1182],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "4292518483"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 19,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [1352, 1408],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "2307749207"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 21,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, T2, T3, T4>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [1591, 1647],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "1630168822"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 23,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [1851, 1907],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "3918672882"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 25,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, T2, T3, T4, T5>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [2124, 2180],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "3162570163"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 27,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [2418, 2474],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "335168663"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 29,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, T2, T3, T4, T5, T6>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): OperatorFunction<T, T | T2 | T3 | T4 | T5 | T6>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [2725, 2781],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "469007766"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 31,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T>(...observables: Array<ObservableInput<T> | SchedulerLike | number>): MonoTypeOperatorFunction<T>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [3053, 3109],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "2365193596"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 33,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated Deprecated in favor of static smoosh. */",
    "pos": [3236, 3292],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "2475286309"
  },
  {
    "path": "src/internal/operators/smoosh.ts",
    "lineNumber": 39,
    "name": "smoosh",
    "kind": "FunctionDeclaration",
    "code": "export function smoosh<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): OperatorFunction<T, R> {\r\n  return (source: Observable<T>) => source.lift.call(smooshStatic(source, ...observables));\r\n}",
    "deprecationMessage": "/**\r\n * @deprecated Deprecated in favor of static smoosh.\r\n */",
    "pos": [3458, 3520],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "898391939"
  },
  {
    "path": "src/internal/operators/smooshMap.ts",
    "lineNumber": 15,
    "name": "smooshMap",
    "kind": "FunctionDeclaration",
    "code": "export function smooshMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, use inner map instead */",
    "pos": [668, 744],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "4062105433"
  },
  {
    "path": "src/internal/operators/smooshMap.ts",
    "lineNumber": 17,
    "name": "smooshMap",
    "kind": "FunctionDeclaration",
    "code": "export function smooshMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated resultSelector no longer supported, use inner map instead */",
    "pos": [910, 986],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "1971547388"
  },
  {
    "path": "src/internal/operators/smooshMapTo.ts",
    "lineNumber": 9,
    "name": "smooshMapTo",
    "kind": "FunctionDeclaration",
    "code": "export function smooshMapTo<T, I, R>(innerObservable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;",
    "deprecationMessage": "/** @deprecated */",
    "pos": [347, 365],
    "version": "6.0.0-smoosh.1",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-04-01T13:14:44-07:00",
    "ruid": "1952431061"
  },
  {
    "path": "src/internal/symbol/observable.ts",
    "lineNumber": 26,
    "name": "$$observable",
    "kind": "VariableStatement",
    "code": "export const $$observable = observable;",
    "deprecationMessage": "/**\r\n * @deprecated use observable instead\r\n */",
    "pos": [514, 561],
    "version": "6.0.0-alpha.3",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-02-06T15:40:10-08:00",
    "ruid": "2134953186"
  },
  {
    "path": "src/BehaviorSubject.ts",
    "lineNumber": 19,
    "name": "BehaviorSubject._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): Subscription {\r\n    const subscription = super._subscribe(subscriber);\r\n    if (subscription && !(<ISubscription>subscription).closed) {\r\n      subscriber.next(this._value);\r\n    }\r\n    return subscription;\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [433, 469],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "1898038616"
  },
  {
    "path": "src/ReplaySubject.ts",
    "lineNumber": 32,
    "name": "ReplaySubject._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): Subscription {\r\n    const _events = this._trimBufferThenGetEvents();\r\n    const scheduler = this.scheduler;\r\n    let subscription: Subscription;\r\n\r\n    if (this.closed) {\r\n      throw new ObjectUnsubscribedError();\r\n    } else if (this.hasError) {\r\n      subscription = Subscription.EMPTY;\r\n    } else if (this.isStopped) {\r\n      subscription = Subscription.EMPTY;\r\n    } else {\r\n      this.observers.push(subscriber);\r\n      subscription = new SubjectSubscription(this, subscriber);\r\n    }\r\n\r\n    if (scheduler) {\r\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\r\n    }\r\n\r\n    const len = _events.length;\r\n    for (let i = 0; i < len && !subscriber.closed; i++) {\r\n      subscriber.next(_events[i].value);\r\n    }\r\n\r\n    if (this.hasError) {\r\n      subscriber.error(this.thrownError);\r\n    } else if (this.isStopped) {\r\n      subscriber.complete();\r\n    }\r\n\r\n    return subscription;\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [1106, 1142],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "837639279"
  },
  {
    "path": "src/observable/ArrayLikeObservable.ts",
    "lineNumber": 56,
    "name": "ArrayLikeObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): TeardownLogic {\r\n    let index = 0;\r\n    const { arrayLike, scheduler } = this;\r\n    const length = arrayLike.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\r\n        arrayLike, index, length, subscriber\r\n      });\r\n    } else {\r\n      for (let i = 0; i < length && !subscriber.closed; i++) {\r\n        subscriber.next(arrayLike[i]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [1490, 1526],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "3458863717"
  },
  {
    "path": "src/observable/ArrayObservable.ts",
    "lineNumber": 112,
    "name": "ArrayObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): TeardownLogic {\r\n    let index = 0;\r\n    const array = this.array;\r\n    const count = array.length;\r\n    const scheduler = this.scheduler;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\r\n        array, index, count, subscriber\r\n      });\r\n    } else {\r\n      for (let i = 0; i < count && !subscriber.closed; i++) {\r\n        subscriber.next(array[i]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [4000, 4036],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "3690280666"
  },
  {
    "path": "src/observable/BoundCallbackObservable.ts",
    "lineNumber": 188,
    "name": "BoundCallbackObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T | T[]>): Subscription {\r\n    const callbackFunc = this.callbackFunc;\r\n    const args = this.args;\r\n    const scheduler = this.scheduler;\r\n    let subject = this.subject;\r\n\r\n    if (!scheduler) {\r\n      if (!subject) {\r\n        subject = this.subject = new AsyncSubject<T>();\r\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\r\n          const source = (<any>handlerFn).source;\r\n          const { selector, subject } = source;\r\n          if (selector) {\r\n            const result = tryCatch(selector).apply(this, innerArgs);\r\n            if (result === errorObject) {\r\n              subject.error(errorObject.e);\r\n          } else {\r\n              subject.next(result);\r\n              subject.complete();\r\n            }\r\n          } else {\r\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\r\n            subject.complete();\r\n          }\r\n        };\r\n        // use named function instance to avoid closure.\r\n        (<any>handler).source = this;\r\n\r\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\r\n        if (result === errorObject) {\r\n          subject.error(errorObject.e);\r\n        }\r\n      }\r\n      return subject.subscribe(subscriber);\r\n    } else {\r\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [11641, 11677],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "16969353"
  },
  {
    "path": "src/observable/BoundNodeCallbackObservable.ts",
    "lineNumber": 171,
    "name": "BoundNodeCallbackObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T | T[]>): Subscription {\r\n    const callbackFunc = this.callbackFunc;\r\n    const args = this.args;\r\n    const scheduler = this.scheduler;\r\n    let subject = this.subject;\r\n\r\n    if (!scheduler) {\r\n      if (!subject) {\r\n        subject = this.subject = new AsyncSubject<T>();\r\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\r\n          const source = (<any>handlerFn).source;\r\n          const { selector, subject } = source;\r\n          const err = innerArgs.shift();\r\n\r\n          if (err) {\r\n            subject.error(err);\r\n          } else if (selector) {\r\n            const result = tryCatch(selector).apply(this, innerArgs);\r\n            if (result === errorObject) {\r\n              subject.error(errorObject.e);\r\n            } else {\r\n              subject.next(result);\r\n              subject.complete();\r\n            }\r\n          } else {\r\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\r\n            subject.complete();\r\n          }\r\n        };\r\n        // use named function instance to avoid closure.\r\n        (<any>handler).source = this;\r\n\r\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\r\n        if (result === errorObject) {\r\n          subject.error(errorObject.e);\r\n        }\r\n      }\r\n      return subject.subscribe(subscriber);\r\n    } else {\r\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [9163, 9199],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "3786384670"
  },
  {
    "path": "src/observable/ConnectableObservable.ts",
    "lineNumber": 13,
    "name": "ConnectableObservable._subject",
    "kind": "PropertyDeclaration",
    "code": "public _subject: Subject<T>;",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [442, 478],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "1943021516"
  },
  {
    "path": "src/observable/ConnectableObservable.ts",
    "lineNumber": 14,
    "name": "ConnectableObservable._refCount",
    "kind": "PropertyDeclaration",
    "code": "public _refCount: number = 0;",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [511, 547],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "657938374"
  },
  {
    "path": "src/observable/ConnectableObservable.ts",
    "lineNumber": 15,
    "name": "ConnectableObservable._connection",
    "kind": "PropertyDeclaration",
    "code": "public _connection: Subscription;",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [581, 617],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "1506050767"
  },
  {
    "path": "src/observable/ConnectableObservable.ts",
    "lineNumber": 27,
    "name": "ConnectableObservable.getSubject",
    "kind": "MethodDeclaration",
    "code": "public getSubject(): Subject<T> {\r\n    const subject = this._subject;\r\n    if (!subject || subject.isStopped) {\r\n      this._subject = this.subjectFactory();\r\n    }\r\n    return this._subject;\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [1019, 1055],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "1610730127"
  },
  {
    "path": "src/observable/ConnectableObservable.ts",
    "lineNumber": 85,
    "name": "ConnectableSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n    const connectable = <any>this.connectable;\r\n    if (connectable) {\r\n      this.connectable = null;\r\n      const connection = connectable._connection;\r\n      connectable._refCount = 0;\r\n      connectable._subject = null;\r\n      connectable._connection = null;\r\n      if (connection) {\r\n        connection.unsubscribe();\r\n      }\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [2877, 2913],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "3760652910"
  },
  {
    "path": "src/operators/refCount.ts",
    "lineNumber": 42,
    "name": "RefCountSubscriber._unsubscribe",
    "kind": "MethodDeclaration",
    "code": "_unsubscribe() {\r\n\r\n    const { connectable } = this;\r\n    if (!connectable) {\r\n      this.connection = null;\r\n      return;\r\n    }\r\n\r\n    this.connectable = null;\r\n    const refCount = (<any> connectable)._refCount;\r\n    if (refCount <= 0) {\r\n      this.connection = null;\r\n      return;\r\n    }\r\n\r\n    (<any> connectable)._refCount = refCount - 1;\r\n    if (refCount > 1) {\r\n      this.connection = null;\r\n      return;\r\n    }\r\n\r\n    ///\r\n    // Compare the local RefCountSubscriber's connection Subscription to the\r\n    // connection Subscription on the shared ConnectableObservable. In cases\r\n    // where the ConnectableObservable source synchronously emits values, and\r\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\r\n    // execution continues to here before the RefCountOperator has a chance to\r\n    // supply the RefCountSubscriber with the shared connection Subscription.\r\n    // For example:\r\n    // ```\r\n    // Observable.range(0, 10)\r\n    //   .publish()\r\n    //   .refCount()\r\n    //   .take(5)\r\n    //   .subscribe();\r\n    // ```\r\n    // In order to account for this case, RefCountSubscriber should only dispose\r\n    // the ConnectableObservable's shared connection Subscription if the\r\n    // connection Subscription exists, *and* either:\r\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\r\n    //      Subscription yet, or,\r\n    //   b. RefCountSubscriber's connection Subscription reference is identical\r\n    //      to the shared connection Subscription\r\n    ///\r\n    const { connection } = this;\r\n    const sharedConnection = (<any> connectable)._connection;\r\n    this.connection = null;\r\n\r\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\r\n      sharedConnection.unsubscribe();\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [1327, 1363],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "53964405"
  },
  {
    "path": "src/observable/DeferObservable.ts",
    "lineNumber": 68,
    "name": "DeferObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): Subscription {\r\n    return new DeferSubscriber(subscriber, this.observableFactory);\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [2788, 2824],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "304609721"
  },
  {
    "path": "src/observable/EmptyObservable.ts",
    "lineNumber": 73,
    "name": "EmptyObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): TeardownLogic {\r\n\r\n    const scheduler = this.scheduler;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\r\n    } else {\r\n      subscriber.complete();\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [2357, 2393],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "4020187555"
  },
  {
    "path": "src/observable/ErrorObservable.ts",
    "lineNumber": 71,
    "name": "ErrorObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<any>): TeardownLogic {\r\n    const error = this.error;\r\n    const scheduler = this.scheduler;\r\n\r\n    subscriber.syncErrorThrowable = true;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\r\n        error, subscriber\r\n      });\r\n    } else {\r\n      subscriber.error(error);\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [2357, 2393],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "573753405"
  },
  {
    "path": "src/observable/ForkJoinObservable.ts",
    "lineNumber": 164,
    "name": "ForkJoinObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<any>): Subscription {\r\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [9223, 9259],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "635004590"
  },
  {
    "path": "src/observable/FromEventObservable.ts",
    "lineNumber": 228,
    "name": "FromEventObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>) {\r\n    const sourceObj = this.sourceObj;\r\n    const eventName = this.eventName;\r\n    const options = this.options;\r\n    const selector = this.selector;\r\n    let handler = selector ? (...args: any[]) => {\r\n      let result = tryCatch(selector)(...args);\r\n      if (result === errorObject) {\r\n        subscriber.error(errorObject.e);\r\n      } else {\r\n        subscriber.next(result);\r\n      }\r\n    } : (e: any) => subscriber.next(e);\r\n\r\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [10778, 10814],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "2522001075"
  },
  {
    "path": "src/observable/FromEventPatternObservable.ts",
    "lineNumber": 73,
    "name": "FromEventPatternObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>) {\r\n    const removeHandler = this.removeHandler;\r\n\r\n    const handler = !!this.selector ? (...args: Array<any>) => {\r\n      this._callSelector(subscriber, args);\r\n    } : function(e: any) { subscriber.next(e); };\r\n\r\n    const retValue = this._callAddHandler(handler, subscriber);\r\n\r\n    if (!isFunction(removeHandler)) {\r\n      return;\r\n    }\r\n\r\n    subscriber.add(new Subscription(() => {\r\n      //TODO: determine whether or not to forward to error handler\r\n      removeHandler(handler, retValue) ;\r\n    }));\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [2850, 2886],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "354781589"
  },
  {
    "path": "src/observable/FromObservable.ts",
    "lineNumber": 106,
    "name": "FromObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>) {\r\n    const ish = this.ish;\r\n    const scheduler = this.scheduler;\r\n    if (scheduler == null) {\r\n      return ish[Symbol_observable]().subscribe(subscriber);\r\n    } else {\r\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [4197, 4233],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "3805525343"
  },
  {
    "path": "src/observable/GenerateObservable.ts",
    "lineNumber": 203,
    "name": "GenerateObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\r\n    let state = this.initialState;\r\n    if (this.scheduler) {\r\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\r\n        subscriber,\r\n        iterate: this.iterate,\r\n        condition: this.condition,\r\n        resultSelector: this.resultSelector,\r\n        state });\r\n    }\r\n    const { condition, resultSelector, iterate } = this;\r\n    do {\r\n      if (condition) {\r\n        let conditionResult: boolean;\r\n        try {\r\n          conditionResult = condition(state);\r\n        } catch (err) {\r\n          subscriber.error(err);\r\n          return;\r\n        }\r\n        if (!conditionResult) {\r\n          subscriber.complete();\r\n          break;\r\n        }\r\n      }\r\n      let value: T;\r\n      try {\r\n        value = resultSelector(state);\r\n      } catch (err) {\r\n        subscriber.error(err);\r\n        return;\r\n      }\r\n      subscriber.next(value);\r\n      if (subscriber.closed) {\r\n        break;\r\n      }\r\n      try {\r\n        state = iterate(state);\r\n      } catch (err) {\r\n        subscriber.error(err);\r\n        return;\r\n      }\r\n    } while (true);\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [7905, 7941],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "3481560431"
  },
  {
    "path": "src/observable/IfObservable.ts",
    "lineNumber": 26,
    "name": "IfObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\r\n    const { condition, thenSource, elseSource } = this;\r\n\r\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [947, 983],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "2535884063"
  },
  {
    "path": "src/observable/IntervalObservable.ts",
    "lineNumber": 76,
    "name": "IntervalObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<number>) {\r\n    const index = 0;\r\n    const period = this.period;\r\n    const scheduler = this.scheduler;\r\n\r\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\r\n      index, subscriber, period\r\n    }));\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [2516, 2552],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "2390998567"
  },
  {
    "path": "src/observable/IteratorObservable.ts",
    "lineNumber": 58,
    "name": "IteratorObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): TeardownLogic {\r\n\r\n    let index = 0;\r\n    const { iterator, scheduler } = this;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\r\n        index, iterator, subscriber\r\n      });\r\n    } else {\r\n      do {\r\n        let result = iterator.next();\r\n        if (result.done) {\r\n          subscriber.complete();\r\n          break;\r\n        } else {\r\n          subscriber.next(result.value);\r\n        }\r\n        if (subscriber.closed) {\r\n          if (typeof iterator.return === 'function') {\r\n            iterator.return();\r\n          }\r\n          break;\r\n        }\r\n      } while (true);\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [1398, 1434],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "2890183553"
  },
  {
    "path": "src/observable/NeverObservable.ts",
    "lineNumber": 50,
    "name": "NeverObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): void {\r\n    noop();\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [1583, 1619],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "1645093747"
  },
  {
    "path": "src/observable/PairsObservable.ts",
    "lineNumber": 79,
    "name": "PairsObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [2174, 2210],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "3537285935"
  },
  {
    "path": "src/observable/PromiseObservable.ts",
    "lineNumber": 50,
    "name": "PromiseObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): TeardownLogic {\r\n    const promise = this.promise;\r\n    const scheduler = this.scheduler;\r\n\r\n    if (scheduler == null) {\r\n      if (this._isScalar) {\r\n        if (!subscriber.closed) {\r\n          subscriber.next(this.value);\r\n          subscriber.complete();\r\n        }\r\n      } else {\r\n        promise.then(\r\n          (value) => {\r\n            this.value = value;\r\n            this._isScalar = true;\r\n            if (!subscriber.closed) {\r\n              subscriber.next(value);\r\n              subscriber.complete();\r\n            }\r\n          },\r\n          (err) => {\r\n            if (!subscriber.closed) {\r\n              subscriber.error(err);\r\n            }\r\n          }\r\n        )\r\n        .then(null, err => {\r\n          // escape the promise trap, throw unhandled errors\r\n          root.setTimeout(() => { throw err; });\r\n        });\r\n      }\r\n    } else {\r\n      if (this._isScalar) {\r\n        if (!subscriber.closed) {\r\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\r\n        }\r\n      } else {\r\n        promise.then(\r\n          (value) => {\r\n            this.value = value;\r\n            this._isScalar = true;\r\n            if (!subscriber.closed) {\r\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\r\n            }\r\n          },\r\n          (err) => {\r\n            if (!subscriber.closed) {\r\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\r\n            }\r\n          })\r\n          .then(null, (err) => {\r\n            // escape the promise trap, throw unhandled errors\r\n            root.setTimeout(() => { throw err; });\r\n          });\r\n      }\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [1823, 1859],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "1484265058"
  },
  {
    "path": "src/observable/RangeObservable.ts",
    "lineNumber": 83,
    "name": "RangeObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<number>): TeardownLogic {\r\n    let index = 0;\r\n    let start = this.start;\r\n    const count = this._count;\r\n    const scheduler = this.scheduler;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\r\n        index, count, start, subscriber\r\n      });\r\n    } else {\r\n      do {\r\n        if (index++ >= count) {\r\n          subscriber.complete();\r\n          break;\r\n        }\r\n        subscriber.next(start++);\r\n        if (subscriber.closed) {\r\n          break;\r\n        }\r\n      } while (true);\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [2426, 2462],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "519579960"
  },
  {
    "path": "src/observable/ScalarObservable.ts",
    "lineNumber": 42,
    "name": "ScalarObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): TeardownLogic {\r\n    const value = this.value;\r\n    const scheduler = this.scheduler;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\r\n        done: false, value, subscriber\r\n      });\r\n    } else {\r\n      subscriber.next(value);\r\n      if (!subscriber.closed) {\r\n        subscriber.complete();\r\n      }\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [970, 1006],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "2446543288"
  },
  {
    "path": "src/observable/TimerObservable.ts",
    "lineNumber": 107,
    "name": "TimerObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<number>): TeardownLogic {\r\n    const index = 0;\r\n    const { period, dueTime, scheduler } = this;\r\n\r\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\r\n      index, period, subscriber\r\n    });\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [3720, 3756],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "976347643"
  },
  {
    "path": "src/observable/UsingObservable.ts",
    "lineNumber": 24,
    "name": "UsingObservable._subscribe",
    "kind": "MethodDeclaration",
    "code": "_subscribe(subscriber: Subscriber<T>): TeardownLogic {\r\n    const { resourceFactory, observableFactory } = this;\r\n\r\n    let resource: AnonymousSubscription;\r\n\r\n    try {\r\n      resource = <AnonymousSubscription>resourceFactory();\r\n      return new UsingSubscriber(subscriber, resource, observableFactory);\r\n    } catch (err) {\r\n      subscriber.error(err);\r\n    }\r\n  }",
    "deprecationMessage": "/** @deprecated internal use only */",
    "pos": [957, 993],
    "version": "5.6.0-forward-compat.5",
    "remoteUrl": "https://github.com/BioPhoton/rxjs.git",
    "date": "2018-05-21T22:06:31-07:00",
    "ruid": "3076546196"
  }
]
